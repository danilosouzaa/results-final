Welcome to the CBC MILP Solver
Version: Devel (unstable)
Build Date: Apr 26 2022
command line - -import /home/danilo/psp-janniele/J30/j3048/j3048_4.lp -timeM elapsed -seconds 10800 -solve -solu sol-full/sol-j3048_4.txt -quit (default strategy 1)
seconds was changed from 1e+08 to 10800
Continuous objective value is 2.18927 - 0.176466 seconds
Cgl0002I 9 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 282 rows, 615 columns (615 integer (614 of which binary)) and 9290 elements
Coin3009W Conflict graph built in 0.014 seconds, density: 1.046%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0045I Cutoff increment increased from 0.0001 to 0.9999
Cbc0045I 1 integer variables out of 615 objects (615 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 81 integers unsatisfied sum - 22.0891
Cbc0038I Pass   1: suminf.   11.73741 (47) obj. 4 iterations 79
Cbc0038I Pass   2: suminf.   11.17014 (45) obj. 4 iterations 16
Cbc0038I Pass   3: suminf.   10.71465 (49) obj. 4 iterations 14
Cbc0038I Pass   4: suminf.   10.57920 (37) obj. 4 iterations 8
Cbc0038I Pass   5: suminf.    9.99074 (33) obj. 4 iterations 38
Cbc0038I Pass   6: suminf.    4.67467 (29) obj. 4 iterations 64
Cbc0038I Pass   7: suminf.    4.52880 (21) obj. 4 iterations 26
Cbc0038I Pass   8: suminf.    7.54286 (27) obj. 4 iterations 77
Cbc0038I Pass   9: suminf.    6.18284 (33) obj. 4 iterations 41
Cbc0038I Pass  10: suminf.    5.88307 (31) obj. 4 iterations 17
Cbc0038I Pass  11: suminf.    5.71079 (22) obj. 4 iterations 19
Cbc0038I Pass  12: suminf.    5.02531 (22) obj. 4 iterations 22
Cbc0038I Pass  13: suminf.    8.39837 (28) obj. 4 iterations 56
Cbc0038I Pass  14: suminf.    5.55078 (29) obj. 4 iterations 40
Cbc0038I Pass  15: suminf.    4.47966 (17) obj. 4 iterations 36
Cbc0038I Pass  16: suminf.    6.94982 (21) obj. 4 iterations 58
Cbc0038I Pass  17: suminf.    6.06307 (24) obj. 4 iterations 35
Cbc0038I Pass  18: suminf.    5.79641 (24) obj. 4 iterations 3
Cbc0038I Pass  19: suminf.    8.42655 (30) obj. 4 iterations 69
Cbc0038I Pass  20: suminf.    7.43939 (26) obj. 4 iterations 43
Cbc0038I Pass  21: suminf.    7.17692 (27) obj. 4 iterations 6
Cbc0038I Pass  22: suminf.    5.50243 (21) obj. 4 iterations 56
Cbc0038I Pass  23: suminf.    4.99683 (21) obj. 4 iterations 22
Cbc0038I Pass  24: suminf.    4.47877 (28) obj. 4 iterations 31
Cbc0038I Pass  25: suminf.    6.22801 (28) obj. 4 iterations 70
Cbc0038I Pass  26: suminf.    4.59730 (24) obj. 4 iterations 34
Cbc0038I Pass  27: suminf.    4.32192 (23) obj. 4 iterations 29
Cbc0038I Pass  28: suminf.    6.74412 (21) obj. 4 iterations 87
Cbc0038I Pass  29: suminf.    5.35287 (19) obj. 4 iterations 44
Cbc0038I Pass  30: suminf.    3.36465 (16) obj. 4 iterations 53
Cbc0038I Pass  31: suminf.    3.34040 (13) obj. 4 iterations 21
Cbc0038I Pass  32: suminf.    5.50635 (19) obj. 4 iterations 49
Cbc0038I Pass  33: suminf.    3.20707 (13) obj. 4 iterations 41
Cbc0038I Pass  34: suminf.    3.20707 (13) obj. 4 iterations 3
Cbc0038I Pass  35: suminf.    5.46667 (15) obj. 4 iterations 34
Cbc0038I Pass  36: suminf.    4.69206 (14) obj. 4 iterations 31
Cbc0038I Pass  37: suminf.    3.87037 (15) obj. 4 iterations 52
Cbc0038I Pass  38: suminf.    2.94040 (13) obj. 4 iterations 44
Cbc0038I Pass  39: suminf.    2.94040 (13) obj. 4 iterations 1
Cbc0038I Pass  40: suminf.    5.46667 (15) obj. 4 iterations 56
Cbc0038I Pass  41: suminf.    4.69206 (14) obj. 4 iterations 34
Cbc0038I Pass  42: suminf.    9.14881 (40) obj. 4 iterations 125
Cbc0038I Pass  43: suminf.    4.36968 (19) obj. 4 iterations 115
Cbc0038I Pass  44: suminf.    3.52877 (23) obj. 4 iterations 72
Cbc0038I Pass  45: suminf.    6.49524 (23) obj. 4 iterations 98
Cbc0038I Pass  46: suminf.    3.30026 (18) obj. 4 iterations 49
Cbc0038I Pass  47: suminf.    2.20317 (13) obj. 4 iterations 41
Cbc0038I Pass  48: suminf.    2.20317 (13) obj. 4 iterations 5
Cbc0038I Pass  49: suminf.    2.66893 (12) obj. 4 iterations 40
Cbc0038I Pass  50: suminf.    2.51398 (11) obj. 4 iterations 27
Cbc0038I Pass  51: suminf.    2.41111 (9) obj. 4 iterations 43
Cbc0038I Pass  52: suminf.    1.72619 (10) obj. 4 iterations 42
Cbc0038I Pass  53: suminf.    3.45849 (11) obj. 4 iterations 71
Cbc0038I Pass  54: suminf.    1.91087 (10) obj. 4 iterations 53
Cbc0038I Pass  55: suminf.    2.56508 (11) obj. 4 iterations 88
Cbc0038I Pass  56: suminf.    2.22090 (12) obj. 4 iterations 28
Cbc0038I Pass  57: suminf.    2.71841 (13) obj. 4 iterations 61
Cbc0038I Pass  58: suminf.    1.80159 (9) obj. 4 iterations 45
Cbc0038I Pass  59: suminf.    3.07653 (10) obj. 4 iterations 93
Cbc0038I Pass  60: suminf.   10.79722 (33) obj. 4 iterations 101
Cbc0038I Pass  61: suminf.    6.83104 (29) obj. 4 iterations 75
Cbc0038I Pass  62: suminf.    5.34992 (26) obj. 4 iterations 12
Cbc0038I Pass  63: suminf.    4.77959 (22) obj. 4 iterations 18
Cbc0038I Pass  64: suminf.    4.85661 (21) obj. 4 iterations 63
Cbc0038I Pass  65: suminf.    3.40910 (24) obj. 4 iterations 81
Cbc0038I Pass  66: suminf.    3.08889 (22) obj. 4 iterations 74
Cbc0038I Pass  67: suminf.    4.60000 (14) obj. 4 iterations 105
Cbc0038I Pass  68: suminf.    3.67273 (15) obj. 4 iterations 29
Cbc0038I Pass  69: suminf.    5.88600 (19) obj. 4 iterations 75
Cbc0038I Pass  70: suminf.    2.19643 (10) obj. 4 iterations 85
Cbc0038I Pass  71: suminf.    1.95833 (9) obj. 4 iterations 27
Cbc0038I Pass  72: suminf.    3.33333 (10) obj. 4 iterations 81
Cbc0038I Pass  73: suminf.    2.50000 (9) obj. 4 iterations 81
Cbc0038I Pass  74: suminf.    1.97024 (11) obj. 4 iterations 39
Cbc0038I Pass  75: suminf.    2.58333 (11) obj. 4 iterations 93
Cbc0038I Pass  76: suminf.    1.50000 (9) obj. 4 iterations 49
Cbc0038I Pass  77: suminf.    1.30952 (10) obj. 4 iterations 48
Cbc0038I Pass  78: suminf.    1.42857 (7) obj. 4 iterations 82
Cbc0038I Pass  79: suminf.    0.89286 (6) obj. 4 iterations 27
Cbc0038I Pass  80: suminf.    1.67857 (7) obj. 4 iterations 44
Cbc0038I Pass  81: suminf.    1.05769 (8) obj. 4 iterations 60
Cbc0038I Pass  82: suminf.    1.21429 (4) obj. 4 iterations 38
Cbc0038I Pass  83: suminf.    0.96429 (6) obj. 4 iterations 29
Cbc0038I Pass  84: suminf.    1.30769 (6) obj. 4 iterations 56
Cbc0038I Pass  85: suminf.    0.80769 (4) obj. 4 iterations 28
Cbc0038I Pass  86: suminf.    1.85714 (5) obj. 4 iterations 40
Cbc0038I Pass  87: suminf.    1.21429 (4) obj. 4 iterations 18
Cbc0038I Pass  88: suminf.    0.96429 (6) obj. 4 iterations 5
Cbc0038I Pass  89: suminf.    1.30769 (6) obj. 4 iterations 44
Cbc0038I Pass  90: suminf.    0.80769 (4) obj. 4 iterations 23
Cbc0038I Pass  91: suminf.    1.85714 (5) obj. 4 iterations 46
Cbc0038I Pass  92: suminf.    1.18667 (12) obj. 4 iterations 32
Cbc0038I Pass  93: suminf.    3.03333 (9) obj. 4 iterations 68
Cbc0038I Pass  94: suminf.    2.53333 (6) obj. 4 iterations 29
Cbc0038I Pass  95: suminf.    0.96429 (6) obj. 4 iterations 72
Cbc0038I Pass  96: suminf.    1.30769 (6) obj. 4 iterations 53
Cbc0038I Pass  97: suminf.    0.80769 (4) obj. 4 iterations 15
Cbc0038I Pass  98: suminf.    1.85714 (5) obj. 4 iterations 47
Cbc0038I Pass  99: suminf.    1.21429 (4) obj. 4 iterations 13
Cbc0038I Pass 100: suminf.    9.62195 (30) obj. 4 iterations 144
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 375 integers at bound fixed and 0 continuous
Cbc0038I Full problem 282 rows 615 columns, reduced to 187 rows 212 columns
Cbc0038I Mini branch and bound did not improve solution (3.38 seconds)
Cbc0038I After 3.38 seconds - Feasibility pump exiting - took 2.37 seconds
Cbc0031I 62 added rows had average density of 30.532258
Cbc0013I At root node, 62 cuts changed objective from 2.1892744 to 3 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 273 row cuts average 7.5 elements, 3 column cuts (3 active)  in 0.413 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 195 row cuts average 593.3 elements, 0 column cuts (0 active)  in 0.641 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 29 row cuts average 13.4 elements, 0 column cuts (0 active)  in 0.110 seconds - new frequency is 1
Cbc0014I Cut generator 3 (liftKnapsack) - 125 row cuts average 17.1 elements, 0 column cuts (0 active)  in 14.136 seconds - new frequency is 1
Cbc0014I Cut generator 4 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 5 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.063 seconds - new frequency is -100
Cbc0014I Cut generator 6 (MixedIntegerRounding2) - 95 row cuts average 37.1 elements, 0 column cuts (0 active)  in 0.045 seconds - new frequency is 1
Cbc0014I Cut generator 7 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 8 (TwoMirCuts) - 116 row cuts average 118.1 elements, 0 column cuts (0 active)  in 0.159 seconds - new frequency is 1
Cbc0014I Cut generator 9 (ZeroHalf) - 136 row cuts average 54.8 elements, 0 column cuts (0 active)  in 0.106 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 3 (20.34 seconds)
Cbc0010I After 1 nodes, 2 on tree, 1e+50 best solution, best possible 3 (23.01 seconds)
Cbc0010I After 2 nodes, 3 on tree, 1e+50 best solution, best possible 3 (26.55 seconds)
Cbc0010I After 3 nodes, 4 on tree, 1e+50 best solution, best possible 3 (31.74 seconds)
Cbc0010I After 4 nodes, 5 on tree, 1e+50 best solution, best possible 3 (34.73 seconds)
Cbc0010I After 5 nodes, 6 on tree, 1e+50 best solution, best possible 3 (38.19 seconds)
Cbc0010I After 6 nodes, 7 on tree, 1e+50 best solution, best possible 3 (39.42 seconds)
Cbc0010I After 7 nodes, 8 on tree, 1e+50 best solution, best possible 3 (40.98 seconds)
Cbc0010I After 9 nodes, 8 on tree, 1e+50 best solution, best possible 3 (43.07 seconds)
Cbc0010I After 10 nodes, 9 on tree, 1e+50 best solution, best possible 3 (44.82 seconds)
Cbc0010I After 11 nodes, 10 on tree, 1e+50 best solution, best possible 3 (46.27 seconds)
Cbc0010I After 12 nodes, 10 on tree, 1e+50 best solution, best possible 3 (47.21 seconds)
Cbc0010I After 13 nodes, 10 on tree, 1e+50 best solution, best possible 3 (49.72 seconds)
Cbc0010I After 14 nodes, 11 on tree, 1e+50 best solution, best possible 3 (51.05 seconds)
Cbc0010I After 17 nodes, 10 on tree, 1e+50 best solution, best possible 3 (51.94 seconds)
Cbc0010I After 18 nodes, 10 on tree, 1e+50 best solution, best possible 3 (52.76 seconds)
Cbc0010I After 21 nodes, 8 on tree, 1e+50 best solution, best possible 3 (54.45 seconds)
Cbc0010I After 22 nodes, 9 on tree, 1e+50 best solution, best possible 3 (55.87 seconds)
Cbc0010I After 23 nodes, 10 on tree, 1e+50 best solution, best possible 3 (57.79 seconds)
Cbc0010I After 33 nodes, 1 on tree, 1e+50 best solution, best possible 3 (59.70 seconds)
Cbc0010I After 34 nodes, 1 on tree, 1e+50 best solution, best possible 4 (63.13 seconds)
Cbc0010I After 35 nodes, 2 on tree, 1e+50 best solution, best possible 4 (66.35 seconds)
Cbc0010I After 36 nodes, 3 on tree, 1e+50 best solution, best possible 4 (69.89 seconds)
Cbc0010I After 37 nodes, 4 on tree, 1e+50 best solution, best possible 4 (73.05 seconds)
Cbc0010I After 38 nodes, 5 on tree, 1e+50 best solution, best possible 4 (75.78 seconds)
Cbc0010I After 39 nodes, 5 on tree, 1e+50 best solution, best possible 4 (77.20 seconds)
Cbc0010I After 41 nodes, 4 on tree, 1e+50 best solution, best possible 4 (80.92 seconds)
Cbc0010I After 42 nodes, 5 on tree, 1e+50 best solution, best possible 4 (86.01 seconds)
Cbc0010I After 43 nodes, 6 on tree, 1e+50 best solution, best possible 4 (87.74 seconds)
Cbc0010I After 44 nodes, 7 on tree, 1e+50 best solution, best possible 4 (88.47 seconds)
Cbc0010I After 45 nodes, 8 on tree, 1e+50 best solution, best possible 4 (90.60 seconds)
Cbc0010I After 46 nodes, 8 on tree, 1e+50 best solution, best possible 4 (92.56 seconds)
Cbc0010I After 47 nodes, 8 on tree, 1e+50 best solution, best possible 4 (94.13 seconds)
Cbc0010I After 48 nodes, 9 on tree, 1e+50 best solution, best possible 4 (95.54 seconds)
Cbc0010I After 49 nodes, 10 on tree, 1e+50 best solution, best possible 4 (96.97 seconds)
Cbc0010I After 51 nodes, 9 on tree, 1e+50 best solution, best possible 4 (99.43 seconds)
Cbc0010I After 52 nodes, 10 on tree, 1e+50 best solution, best possible 4 (101.42 seconds)
Cbc0010I After 53 nodes, 10 on tree, 1e+50 best solution, best possible 4 (103.52 seconds)
Cbc0010I After 54 nodes, 10 on tree, 1e+50 best solution, best possible 4 (105.58 seconds)
Cbc0010I After 55 nodes, 10 on tree, 1e+50 best solution, best possible 4 (107.39 seconds)
Cbc0010I After 56 nodes, 10 on tree, 1e+50 best solution, best possible 4 (109.69 seconds)
Cbc0010I After 57 nodes, 11 on tree, 1e+50 best solution, best possible 4 (111.66 seconds)
Cbc0010I After 58 nodes, 12 on tree, 1e+50 best solution, best possible 4 (113.36 seconds)
Cbc0010I After 59 nodes, 13 on tree, 1e+50 best solution, best possible 4 (114.49 seconds)
Cbc0010I After 60 nodes, 14 on tree, 1e+50 best solution, best possible 4 (115.25 seconds)
Cbc0010I After 61 nodes, 14 on tree, 1e+50 best solution, best possible 4 (116.78 seconds)
Cbc0010I After 62 nodes, 15 on tree, 1e+50 best solution, best possible 4 (118.90 seconds)
Cbc0010I After 63 nodes, 16 on tree, 1e+50 best solution, best possible 4 (119.65 seconds)
Cbc0010I After 65 nodes, 17 on tree, 1e+50 best solution, best possible 4 (121.07 seconds)
Cbc0010I After 67 nodes, 16 on tree, 1e+50 best solution, best possible 4 (123.39 seconds)
Cbc0010I After 69 nodes, 15 on tree, 1e+50 best solution, best possible 4 (124.77 seconds)
Cbc0010I After 72 nodes, 15 on tree, 1e+50 best solution, best possible 4 (126.43 seconds)
Cbc0010I After 73 nodes, 16 on tree, 1e+50 best solution, best possible 4 (127.67 seconds)
Cbc0010I After 74 nodes, 16 on tree, 1e+50 best solution, best possible 4 (128.80 seconds)
Cbc0010I After 75 nodes, 16 on tree, 1e+50 best solution, best possible 4 (130.27 seconds)
Cbc0010I After 76 nodes, 17 on tree, 1e+50 best solution, best possible 4 (131.95 seconds)
Cbc0010I After 78 nodes, 18 on tree, 1e+50 best solution, best possible 4 (133.47 seconds)
Cbc0016I Integer solution of 4 found by strong branching after 14263 iterations and 80 nodes (135.25 seconds)
Cbc0001I Search completed - best objective 4, took 14263 iterations and 80 nodes (135.25 seconds)
Cbc0032I Strong branching done 1232 times (29849 iterations), fathomed 2 nodes and fixed 19 variables
Cbc0035I Maximum depth 18, 0 variables fixed on reduced cost
Cuts at root node changed objective from 2.18927 to 3
Probing was tried 83 times and created 1030 cuts of which 0 were active after adding rounds of cuts (0.667835 seconds)
Gomory was tried 82 times and created 210 cuts of which 0 were active after adding rounds of cuts (0.855996 seconds)
Knapsack was tried 82 times and created 118 cuts of which 0 were active after adding rounds of cuts (0.647337 seconds)
liftKnapsack was tried 82 times and created 751 cuts of which 0 were active after adding rounds of cuts (116.847 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.014204 seconds)
OddWheel was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.063018 seconds)
MixedIntegerRounding2 was tried 82 times and created 429 cuts of which 0 were active after adding rounds of cuts (0.300368 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.00469 seconds)
TwoMirCuts was tried 82 times and created 301 cuts of which 0 were active after adding rounds of cuts (0.333366 seconds)
ZeroHalf was tried 82 times and created 601 cuts of which 0 were active after adding rounds of cuts (0.514533 seconds)

Result - Optimal solution found
Objective value:                4
Enumerated nodes:               80
Total iterations:               14263
Time (CPU seconds):             134.447
Time (Wallclock seconds):       135.302
Total time (CPU seconds):       134.459   (Wallclock seconds):       135.317
