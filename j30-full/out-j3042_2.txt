Welcome to the CBC MILP Solver
Version: Devel (unstable)
Build Date: Apr 26 2022
command line - -import /home/danilo/psp-janniele/J30/j3042/j3042_2.lp -timeM elapsed -seconds 10800 -solve -solu sol-full/sol-j3042_2.txt -quit (default strategy 1)
seconds was changed from 1e+08 to 10800
Continuous objective value is 2.06384 - 0.175622 seconds
Cgl0002I 6 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 299 rows, 659 columns (659 integer (658 of which binary)) and 6893 elements
Coin3009W Conflict graph built in 0.012 seconds, density: 0.905%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0045I Cutoff increment increased from 0.0001 to 0.9999
Cbc0045I 1 integer variables out of 659 objects (659 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 86 integers unsatisfied sum - 21.047
Cbc0038I Pass   1: suminf.    9.05079 (48) obj. 4 iterations 120
Cbc0038I Pass   2: suminf.    7.76555 (41) obj. 4 iterations 57
Cbc0038I Pass   3: suminf.    7.55763 (36) obj. 4 iterations 80
Cbc0038I Pass   4: suminf.    6.42913 (36) obj. 4 iterations 40
Cbc0038I Pass   5: suminf.    6.43669 (30) obj. 4 iterations 89
Cbc0038I Pass   6: suminf.    5.33968 (30) obj. 4 iterations 24
Cbc0038I Pass   7: suminf.    5.05079 (29) obj. 4 iterations 10
Cbc0038I Pass   8: suminf.    5.13426 (22) obj. 4 iterations 60
Cbc0038I Pass   9: suminf.    3.80207 (26) obj. 4 iterations 34
Cbc0038I Pass  10: suminf.    4.78242 (28) obj. 4 iterations 32
Cbc0038I Pass  11: suminf.    4.22857 (26) obj. 4 iterations 10
Cbc0038I Pass  12: suminf.    5.91868 (17) obj. 4 iterations 66
Cbc0038I Pass  13: suminf.    5.38535 (17) obj. 4 iterations 13
Cbc0038I Pass  14: suminf.    5.37094 (17) obj. 4 iterations 26
Cbc0038I Pass  15: suminf.    4.97094 (17) obj. 4 iterations 12
Cbc0038I Pass  16: suminf.    7.07424 (18) obj. 4 iterations 34
Cbc0038I Pass  17: suminf.    5.75043 (18) obj. 4 iterations 35
Cbc0038I Pass  18: suminf.    5.55043 (18) obj. 4 iterations 12
Cbc0038I Pass  19: suminf.    5.83761 (17) obj. 4 iterations 60
Cbc0038I Pass  20: suminf.    4.77094 (17) obj. 4 iterations 22
Cbc0038I Pass  21: suminf.    6.21709 (17) obj. 4 iterations 30
Cbc0038I Pass  22: suminf.    5.15043 (17) obj. 4 iterations 13
Cbc0038I Pass  23: suminf.    5.97094 (17) obj. 4 iterations 39
Cbc0038I Pass  24: suminf.   12.57740 (56) obj. 4 iterations 107
Cbc0038I Pass  25: suminf.    7.99960 (38) obj. 4 iterations 77
Cbc0038I Pass  26: suminf.    6.59934 (38) obj. 4 iterations 39
Cbc0038I Pass  27: suminf.    4.89286 (18) obj. 4 iterations 44
Cbc0038I Pass  28: suminf.    4.78058 (33) obj. 4 iterations 31
Cbc0038I Pass  29: suminf.    5.00952 (22) obj. 4 iterations 31
Cbc0038I Pass  30: suminf.    4.94339 (22) obj. 4 iterations 21
Cbc0038I Pass  31: suminf.    7.22592 (28) obj. 4 iterations 48
Cbc0038I Pass  32: suminf.    6.06652 (39) obj. 4 iterations 29
Cbc0038I Pass  33: suminf.    5.90836 (31) obj. 4 iterations 26
Cbc0038I Pass  34: suminf.    8.08889 (29) obj. 4 iterations 76
Cbc0038I Pass  35: suminf.    8.04127 (29) obj. 4 iterations 9
Cbc0038I Pass  36: suminf.    5.82222 (19) obj. 4 iterations 34
Cbc0038I Pass  37: suminf.    5.04127 (17) obj. 4 iterations 17
Cbc0038I Pass  38: suminf.    4.57460 (15) obj. 4 iterations 28
Cbc0038I Pass  39: suminf.    4.57460 (15) obj. 4 iterations 11
Cbc0038I Pass  40: suminf.    4.17460 (15) obj. 4 iterations 35
Cbc0038I Pass  41: suminf.    4.04127 (15) obj. 4 iterations 13
Cbc0038I Pass  42: suminf.    5.24127 (15) obj. 4 iterations 28
Cbc0038I Pass  43: suminf.   11.07557 (48) obj. 4 iterations 92
Cbc0038I Pass  44: suminf.    6.69903 (30) obj. 4 iterations 92
Cbc0038I Pass  45: suminf.    5.95305 (32) obj. 4 iterations 25
Cbc0038I Pass  46: suminf.    5.88448 (31) obj. 4 iterations 3
Cbc0038I Pass  47: suminf.    5.00238 (22) obj. 4 iterations 79
Cbc0038I Pass  48: suminf.    3.58268 (21) obj. 4 iterations 36
Cbc0038I Pass  49: suminf.    2.92452 (22) obj. 4 iterations 12
Cbc0038I Pass  50: suminf.    7.22143 (26) obj. 4 iterations 70
Cbc0038I Pass  51: suminf.    5.20000 (21) obj. 4 iterations 46
Cbc0038I Pass  52: suminf.    4.86429 (18) obj. 4 iterations 16
Cbc0038I Pass  53: suminf.    5.96354 (24) obj. 4 iterations 62
Cbc0038I Pass  54: suminf.    5.25357 (16) obj. 4 iterations 16
Cbc0038I Pass  55: suminf.    5.20357 (17) obj. 4 iterations 18
Cbc0038I Pass  56: suminf.    5.59958 (25) obj. 4 iterations 62
Cbc0038I Pass  57: suminf.    4.86429 (18) obj. 4 iterations 27
Cbc0038I Pass  58: suminf.    4.65000 (15) obj. 4 iterations 44
Cbc0038I Pass  59: suminf.    4.65000 (15) obj. 4 iterations 13
Cbc0038I Pass  60: suminf.    4.15000 (12) obj. 4 iterations 66
Cbc0038I Pass  61: suminf.    3.95000 (13) obj. 4 iterations 40
Cbc0038I Pass  62: suminf.    3.90000 (14) obj. 4 iterations 18
Cbc0038I Pass  63: suminf.    4.40000 (13) obj. 4 iterations 49
Cbc0038I Pass  64: suminf.    4.20000 (13) obj. 4 iterations 36
Cbc0038I Pass  65: suminf.    3.37222 (19) obj. 4 iterations 55
Cbc0038I Pass  66: suminf.    3.17222 (17) obj. 4 iterations 35
Cbc0038I Pass  67: suminf.    6.33750 (18) obj. 4 iterations 83
Cbc0038I Pass  68: suminf.    4.82923 (21) obj. 4 iterations 57
Cbc0038I Pass  69: suminf.    4.79503 (32) obj. 4 iterations 7
Cbc0038I Pass  70: suminf.    7.34476 (32) obj. 4 iterations 103
Cbc0038I Pass  71: suminf.    5.39881 (21) obj. 4 iterations 53
Cbc0038I Pass  72: suminf.    4.22619 (18) obj. 4 iterations 15
Cbc0038I Pass  73: suminf.    4.03746 (26) obj. 4 iterations 29
Cbc0038I Pass  74: suminf.    4.03746 (26) obj. 4 iterations 3
Cbc0038I Pass  75: suminf.   12.29988 (45) obj. 4 iterations 119
Cbc0038I Pass  76: suminf.    7.64987 (37) obj. 4 iterations 69
Cbc0038I Pass  77: suminf.    6.93321 (37) obj. 4 iterations 25
Cbc0038I Pass  78: suminf.    6.83333 (21) obj. 4 iterations 67
Cbc0038I Pass  79: suminf.    6.29888 (26) obj. 4 iterations 48
Cbc0038I Pass  80: suminf.    6.15329 (27) obj. 4 iterations 18
Cbc0038I Pass  81: suminf.    9.11905 (26) obj. 4 iterations 64
Cbc0038I Pass  82: suminf.    4.37407 (19) obj. 4 iterations 45
Cbc0038I Pass  83: suminf.    4.06667 (15) obj. 4 iterations 26
Cbc0038I Pass  84: suminf.    4.06667 (15) obj. 4 iterations 20
Cbc0038I Pass  85: suminf.    5.23333 (13) obj. 4 iterations 91
Cbc0038I Pass  86: suminf.    4.41984 (17) obj. 4 iterations 36
Cbc0038I Pass  87: suminf.    4.41984 (17) obj. 4 iterations 5
Cbc0038I Pass  88: suminf.   13.04711 (58) obj. 4 iterations 125
Cbc0038I Pass  89: suminf.    6.68095 (32) obj. 4 iterations 100
Cbc0038I Pass  90: suminf.    8.31489 (36) obj. 4 iterations 57
Cbc0038I Pass  91: suminf.    7.63619 (32) obj. 4 iterations 41
Cbc0038I Pass  92: suminf.    7.02621 (41) obj. 4 iterations 44
Cbc0038I Pass  93: suminf.    5.37810 (25) obj. 4 iterations 36
Cbc0038I Pass  94: suminf.    5.27143 (29) obj. 4 iterations 19
Cbc0038I Pass  95: suminf.    6.78571 (23) obj. 4 iterations 47
Cbc0038I Pass  96: suminf.    5.25102 (22) obj. 4 iterations 44
Cbc0038I Pass  97: suminf.    5.25102 (22) obj. 4 iterations 14
Cbc0038I Pass  98: suminf.    7.27986 (26) obj. 4 iterations 63
Cbc0038I Pass  99: suminf.    5.92741 (26) obj. 4 iterations 43
Cbc0038I Pass 100: suminf.   17.15502 (64) obj. 4 iterations 133
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 384 integers at bound fixed and 0 continuous
Cbc0038I Full problem 299 rows 659 columns, reduced to 213 rows 240 columns - too large
Cbc0038I Mini branch and bound did not improve solution (2.04 seconds)
Cbc0038I After 2.04 seconds - Feasibility pump exiting - took 0.79 seconds
Cbc0031I 93 added rows had average density of 28.806452
Cbc0013I At root node, 93 cuts changed objective from 2.0638376 to 3 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 316 row cuts average 11.0 elements, 4 column cuts (4 active)  in 0.357 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 179 row cuts average 597.7 elements, 0 column cuts (0 active)  in 0.708 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 31 row cuts average 18.7 elements, 0 column cuts (0 active)  in 0.124 seconds - new frequency is 1
Cbc0014I Cut generator 3 (liftKnapsack) - 164 row cuts average 13.5 elements, 0 column cuts (0 active)  in 17.819 seconds - new frequency is 1
Cbc0014I Cut generator 4 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is -100
Cbc0014I Cut generator 5 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.087 seconds - new frequency is -100
Cbc0014I Cut generator 6 (MixedIntegerRounding2) - 128 row cuts average 42.8 elements, 0 column cuts (0 active)  in 0.047 seconds - new frequency is 1
Cbc0014I Cut generator 7 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 8 (TwoMirCuts) - 136 row cuts average 190.0 elements, 0 column cuts (0 active)  in 0.221 seconds - new frequency is 1
Cbc0014I Cut generator 9 (ZeroHalf) - 143 row cuts average 40.9 elements, 0 column cuts (0 active)  in 0.212 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 3 (23.50 seconds)
Cbc0010I After 1 nodes, 2 on tree, 1e+50 best solution, best possible 3 (26.53 seconds)
Cbc0010I After 2 nodes, 3 on tree, 1e+50 best solution, best possible 3 (28.87 seconds)
Cbc0010I After 3 nodes, 4 on tree, 1e+50 best solution, best possible 3 (33.06 seconds)
Cbc0010I After 4 nodes, 5 on tree, 1e+50 best solution, best possible 3 (35.41 seconds)
Cbc0010I After 5 nodes, 6 on tree, 1e+50 best solution, best possible 3 (37.79 seconds)
Cbc0010I After 6 nodes, 7 on tree, 1e+50 best solution, best possible 3 (39.74 seconds)
Cbc0010I After 7 nodes, 8 on tree, 1e+50 best solution, best possible 3 (41.29 seconds)
Cbc0010I After 8 nodes, 9 on tree, 1e+50 best solution, best possible 3 (42.30 seconds)
Cbc0010I After 9 nodes, 10 on tree, 1e+50 best solution, best possible 3 (43.65 seconds)
Cbc0010I After 12 nodes, 9 on tree, 1e+50 best solution, best possible 3 (44.85 seconds)
Cbc0010I After 15 nodes, 8 on tree, 1e+50 best solution, best possible 3 (46.63 seconds)
Cbc0010I After 16 nodes, 8 on tree, 1e+50 best solution, best possible 3 (47.77 seconds)
Cbc0010I After 24 nodes, 1 on tree, 1e+50 best solution, best possible 4 (50.52 seconds)
Cbc0010I After 25 nodes, 2 on tree, 1e+50 best solution, best possible 4 (52.47 seconds)
Cbc0010I After 26 nodes, 3 on tree, 1e+50 best solution, best possible 4 (54.26 seconds)
Cbc0010I After 27 nodes, 4 on tree, 1e+50 best solution, best possible 4 (55.56 seconds)
Cbc0010I After 28 nodes, 5 on tree, 1e+50 best solution, best possible 4 (56.49 seconds)
Cbc0010I After 29 nodes, 6 on tree, 1e+50 best solution, best possible 4 (57.31 seconds)
Cbc0010I After 31 nodes, 8 on tree, 1e+50 best solution, best possible 4 (58.54 seconds)
Cbc0010I After 33 nodes, 9 on tree, 1e+50 best solution, best possible 4 (59.32 seconds)
Cbc0010I After 35 nodes, 10 on tree, 1e+50 best solution, best possible 4 (60.04 seconds)
Cbc0010I After 38 nodes, 10 on tree, 1e+50 best solution, best possible 4 (60.94 seconds)
Cbc0010I After 39 nodes, 10 on tree, 1e+50 best solution, best possible 4 (61.78 seconds)
Cbc0010I After 41 nodes, 11 on tree, 1e+50 best solution, best possible 4 (63.96 seconds)
Cbc0010I After 43 nodes, 12 on tree, 1e+50 best solution, best possible 4 (65.46 seconds)
Cbc0010I After 46 nodes, 13 on tree, 1e+50 best solution, best possible 4 (66.35 seconds)
Cbc0010I After 48 nodes, 13 on tree, 1e+50 best solution, best possible 4 (67.62 seconds)
Cbc0010I After 49 nodes, 13 on tree, 1e+50 best solution, best possible 4 (68.40 seconds)
Cbc0010I After 51 nodes, 12 on tree, 1e+50 best solution, best possible 4 (69.36 seconds)
Cbc0010I After 52 nodes, 12 on tree, 1e+50 best solution, best possible 4 (70.81 seconds)
Cbc0010I After 54 nodes, 13 on tree, 1e+50 best solution, best possible 4 (72.47 seconds)
Cbc0010I After 57 nodes, 12 on tree, 1e+50 best solution, best possible 4 (73.79 seconds)
Cbc0010I After 59 nodes, 12 on tree, 1e+50 best solution, best possible 4 (74.60 seconds)
Cbc0010I After 60 nodes, 13 on tree, 1e+50 best solution, best possible 4 (75.39 seconds)
Cbc0010I After 61 nodes, 13 on tree, 1e+50 best solution, best possible 4 (76.75 seconds)
Cbc0010I After 62 nodes, 13 on tree, 1e+50 best solution, best possible 4 (78.51 seconds)
Cbc0010I After 64 nodes, 14 on tree, 1e+50 best solution, best possible 4 (79.46 seconds)
Cbc0010I After 67 nodes, 12 on tree, 1e+50 best solution, best possible 4 (81.49 seconds)
Cbc0010I After 68 nodes, 12 on tree, 1e+50 best solution, best possible 4 (82.82 seconds)
Cbc0010I After 69 nodes, 11 on tree, 1e+50 best solution, best possible 4 (83.92 seconds)
Cbc0010I After 71 nodes, 12 on tree, 1e+50 best solution, best possible 4 (84.91 seconds)
Cbc0010I After 73 nodes, 12 on tree, 1e+50 best solution, best possible 4 (86.19 seconds)
Cbc0010I After 74 nodes, 12 on tree, 1e+50 best solution, best possible 4 (87.29 seconds)
Cbc0010I After 78 nodes, 13 on tree, 1e+50 best solution, best possible 4 (88.02 seconds)
Cbc0016I Integer solution of 4 found by strong branching after 16706 iterations and 81 nodes (88.58 seconds)
Cbc0001I Search completed - best objective 4, took 16721 iterations and 81 nodes (88.58 seconds)
Cbc0032I Strong branching done 1198 times (27440 iterations), fathomed 2 nodes and fixed 7 variables
Cbc0035I Maximum depth 16, 0 variables fixed on reduced cost
Cuts at root node changed objective from 2.06384 to 3
Probing was tried 83 times and created 881 cuts of which 0 were active after adding rounds of cuts (0.624758 seconds)
Gomory was tried 83 times and created 180 cuts of which 0 were active after adding rounds of cuts (0.924759 seconds)
Knapsack was tried 83 times and created 68 cuts of which 0 were active after adding rounds of cuts (0.722722 seconds)
liftKnapsack was tried 83 times and created 1262 cuts of which 0 were active after adding rounds of cuts (72.3066 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.021714 seconds)
OddWheel was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.08695 seconds)
MixedIntegerRounding2 was tried 83 times and created 428 cuts of which 0 were active after adding rounds of cuts (0.265484 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003039 seconds)
TwoMirCuts was tried 83 times and created 313 cuts of which 0 were active after adding rounds of cuts (0.396061 seconds)
ZeroHalf was tried 83 times and created 610 cuts of which 0 were active after adding rounds of cuts (0.745669 seconds)

Result - Optimal solution found
Objective value:                4
Enumerated nodes:               81
Total iterations:               16721
Time (CPU seconds):             88.3885
Time (Wallclock seconds):       88.6277
Total time (CPU seconds):       88.3991   (Wallclock seconds):       88.6395
