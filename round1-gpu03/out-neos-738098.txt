Welcome to the CBC MILP Solver
Version: Devel (unstable)
Build Date: Feb  6 2022
command line - -import /home/danilo/cbc-test-set/neos-738098.mps.gz -timeM elapsed -seconds 10800 -solve -quit (default strategy 1)
At line 1 NAME          neos-738098
At line 2 ROWS
At line 25853 COLUMNS
At line 127363 RHS
At line 136796 BOUNDS
At line 145743 ENDATA
Problem neos-738098 has 25849 rows, 9093 columns and 101360 elements
Coin0008I neos-738098 read with 0 errors
seconds was changed from 1e+08 to 10800
Continuous objective value is -1099 - 45.6794 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 22620 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 19520 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 17518 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 15826 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 14178 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 12593 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 11058 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 8193 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 8188 strengthened rows, 0 substitutions
Cgl0004I processed model has 14239 rows, 8946 columns (8946 integer (8946 of which binary)) and 162765 elements
Coin3009W Conflict graph built in 0.191 seconds, density: 0.159%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0045I Cutoff increment increased from 0.0001 to 0.9999
Cbc0038I Initial state - 461 integers unsatisfied sum - 113.516
Cbc0038I Pass   1: (271.49 seconds) suminf.   29.76667 (112) obj. -1098.7 iterations 17426
Cbc0038I Pass   2: (388.35 seconds) suminf.    9.82609 (48) obj. -1099 iterations 25364
Cbc0038I Pass   3: (394.23 seconds) suminf.    5.50000 (34) obj. -1099 iterations 1205
Cbc0038I Pass   4: (404.00 seconds) suminf.    4.00000 (12) obj. -1099 iterations 1962
Cbc0038I Pass   5: (406.39 seconds) suminf.    4.00000 (12) obj. -1099 iterations 445
Cbc0038I Pass   6: (410.19 seconds) suminf.    4.66667 (14) obj. -1099 iterations 754
Cbc0038I Pass   7: (413.10 seconds) suminf.    4.00000 (12) obj. -1099 iterations 558
Cbc0038I Pass   8: (416.19 seconds) suminf.    4.00000 (12) obj. -1099 iterations 607
Cbc0038I Pass   9: (418.64 seconds) suminf.    4.00000 (12) obj. -1099 iterations 461
Cbc0038I Pass  10: (437.43 seconds) suminf.    2.87500 (19) obj. -1099 iterations 3783
Cbc0038I Pass  11: (450.31 seconds) suminf.    1.77778 (16) obj. -1099 iterations 2563
Cbc0038I Pass  12: (453.07 seconds) suminf.    4.22222 (18) obj. -1099 iterations 537
Cbc0038I Pass  13: (458.17 seconds) suminf.    2.22222 (16) obj. -1099 iterations 999
Cbc0038I Pass  14: (462.53 seconds) suminf.    3.11111 (16) obj. -1099 iterations 861
Cbc0038I Pass  15: (465.03 seconds) suminf.    1.77778 (16) obj. -1099 iterations 469
Cbc0038I Pass  16: (468.05 seconds) suminf.    3.33333 (18) obj. -1099 iterations 602
Cbc0038I Pass  17: (472.37 seconds) suminf.    2.00000 (16) obj. -1099 iterations 824
Cbc0038I Pass  18: (477.44 seconds) suminf.    4.00000 (18) obj. -1099 iterations 970
Cbc0038I Pass  19: (480.63 seconds) suminf.    1.77778 (16) obj. -1099 iterations 593
Cbc0038I Pass  20: (483.35 seconds) suminf.    5.11111 (18) obj. -1099 iterations 539
Cbc0038I Pass  21: (486.64 seconds) suminf.    1.77778 (16) obj. -1099 iterations 633
Cbc0038I Pass  22: (489.96 seconds) suminf.    4.22222 (16) obj. -1099 iterations 640
Cbc0038I Pass  23: (493.04 seconds) suminf.    1.77778 (16) obj. -1099 iterations 608
Cbc0038I Pass  24: (496.69 seconds) suminf.    3.55556 (16) obj. -1099 iterations 707
Cbc0038I Pass  25: (500.07 seconds) suminf.    1.77778 (16) obj. -1099 iterations 605
Cbc0038I Pass  26: (503.09 seconds) suminf.    2.88889 (18) obj. -1099 iterations 576
Cbc0038I Pass  27: (505.50 seconds) suminf.    1.77778 (16) obj. -1099 iterations 432
Cbc0038I Pass  28: (507.91 seconds) suminf.    2.88889 (16) obj. -1099 iterations 460
Cbc0038I Pass  29: (510.85 seconds) suminf.    1.77778 (16) obj. -1099 iterations 531
Cbc0038I Pass  30: (513.18 seconds) suminf.    2.88889 (16) obj. -1099 iterations 444
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 8268 integers at bound fixed and 0 continuous
Cbc0038I Full problem 14239 rows 8946 columns, reduced to 1750 rows 604 columns
Cbc0038I Mini branch and bound did not improve solution (526.66 seconds)
Cbc0038I Full problem 14240 rows 8946 columns, reduced to 14240 rows 8946 columns - too large
Cbc0038I After 567.33 seconds - Feasibility pump exiting - took 361.65 seconds
Cbc0031I 8 added rows had average density of 64.5
Cbc0013I At root node, 8 cuts changed objective from -1099 to -1099 in 4 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 5.796 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 8 row cuts average 89.5 elements, 0 column cuts (0 active)  in 1.798 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.833 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.211 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 3.973 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.329 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 18 row cuts average 93.9 elements, 0 column cuts (0 active)  in 4.831 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -1099 (660.93 seconds)
Cbc0010I After 1 nodes, 2 on tree, 1e+50 best solution, best possible -1099 (686.42 seconds)
Cbc0010I After 2 nodes, 3 on tree, 1e+50 best solution, best possible -1099 (705.62 seconds)
Cbc0010I After 3 nodes, 4 on tree, 1e+50 best solution, best possible -1099 (725.45 seconds)
Cbc0010I After 4 nodes, 5 on tree, 1e+50 best solution, best possible -1099 (740.65 seconds)
Cbc0010I After 5 nodes, 6 on tree, 1e+50 best solution, best possible -1099 (755.99 seconds)
Cbc0010I After 6 nodes, 7 on tree, 1e+50 best solution, best possible -1099 (775.77 seconds)
Cbc0010I After 7 nodes, 8 on tree, 1e+50 best solution, best possible -1099 (789.36 seconds)
Cbc0010I After 8 nodes, 8 on tree, 1e+50 best solution, best possible -1099 (802.39 seconds)
Cbc0010I After 9 nodes, 9 on tree, 1e+50 best solution, best possible -1099 (820.63 seconds)
Cbc0010I After 10 nodes, 10 on tree, 1e+50 best solution, best possible -1099 (834.19 seconds)
Cbc0010I After 11 nodes, 10 on tree, 1e+50 best solution, best possible -1099 (845.30 seconds)
Cbc0010I After 12 nodes, 11 on tree, 1e+50 best solution, best possible -1099 (860.15 seconds)
Cbc0010I After 13 nodes, 11 on tree, 1e+50 best solution, best possible -1099 (874.43 seconds)
Cbc0010I After 14 nodes, 12 on tree, 1e+50 best solution, best possible -1099 (888.72 seconds)
Cbc0010I After 15 nodes, 12 on tree, 1e+50 best solution, best possible -1099 (904.50 seconds)
Cbc0010I After 16 nodes, 12 on tree, 1e+50 best solution, best possible -1099 (920.04 seconds)
Cbc0010I After 17 nodes, 13 on tree, 1e+50 best solution, best possible -1099 (935.43 seconds)
Cbc0010I After 18 nodes, 13 on tree, 1e+50 best solution, best possible -1099 (955.52 seconds)
Cbc0010I After 19 nodes, 14 on tree, 1e+50 best solution, best possible -1099 (967.55 seconds)
Cbc0010I After 20 nodes, 15 on tree, 1e+50 best solution, best possible -1099 (984.60 seconds)
Cbc0010I After 21 nodes, 15 on tree, 1e+50 best solution, best possible -1099 (999.01 seconds)
Cbc0010I After 22 nodes, 16 on tree, 1e+50 best solution, best possible -1099 (1008.81 seconds)
Cbc0010I After 23 nodes, 17 on tree, 1e+50 best solution, best possible -1099 (1019.58 seconds)
Cbc0010I After 24 nodes, 17 on tree, 1e+50 best solution, best possible -1099 (1027.83 seconds)
Cbc0010I After 25 nodes, 18 on tree, 1e+50 best solution, best possible -1099 (1037.97 seconds)
Cbc0010I After 26 nodes, 18 on tree, 1e+50 best solution, best possible -1099 (1047.68 seconds)
Cbc0010I After 27 nodes, 19 on tree, 1e+50 best solution, best possible -1099 (1056.39 seconds)
Cbc0010I After 28 nodes, 20 on tree, 1e+50 best solution, best possible -1099 (1064.05 seconds)
Cbc0010I After 29 nodes, 21 on tree, 1e+50 best solution, best possible -1099 (1073.44 seconds)
Cbc0010I After 30 nodes, 21 on tree, 1e+50 best solution, best possible -1099 (1082.26 seconds)
Cbc0010I After 31 nodes, 22 on tree, 1e+50 best solution, best possible -1099 (1089.88 seconds)
Cbc0010I After 32 nodes, 23 on tree, 1e+50 best solution, best possible -1099 (1099.57 seconds)
Cbc0010I After 33 nodes, 23 on tree, 1e+50 best solution, best possible -1099 (1107.67 seconds)
Cbc0010I After 34 nodes, 24 on tree, 1e+50 best solution, best possible -1099 (1115.34 seconds)
Cbc0010I After 35 nodes, 25 on tree, 1e+50 best solution, best possible -1099 (1122.40 seconds)
Cbc0010I After 36 nodes, 25 on tree, 1e+50 best solution, best possible -1099 (1132.07 seconds)
Cbc0010I After 37 nodes, 26 on tree, 1e+50 best solution, best possible -1099 (1141.26 seconds)
Cbc0010I After 38 nodes, 26 on tree, 1e+50 best solution, best possible -1099 (1147.75 seconds)
Cbc0010I After 39 nodes, 27 on tree, 1e+50 best solution, best possible -1099 (1155.55 seconds)
Cbc0010I After 40 nodes, 28 on tree, 1e+50 best solution, best possible -1099 (1162.82 seconds)
Cbc0010I After 41 nodes, 28 on tree, 1e+50 best solution, best possible -1099 (1170.09 seconds)
Cbc0010I After 42 nodes, 29 on tree, 1e+50 best solution, best possible -1099 (1178.03 seconds)
Cbc0010I After 43 nodes, 29 on tree, 1e+50 best solution, best possible -1099 (1185.96 seconds)
Cbc0010I After 44 nodes, 30 on tree, 1e+50 best solution, best possible -1099 (1193.31 seconds)
Cbc0010I After 45 nodes, 30 on tree, 1e+50 best solution, best possible -1099 (1198.72 seconds)
Cbc0010I After 46 nodes, 31 on tree, 1e+50 best solution, best possible -1099 (1206.18 seconds)
Cbc0010I After 47 nodes, 32 on tree, 1e+50 best solution, best possible -1099 (1214.29 seconds)
Cbc0010I After 48 nodes, 32 on tree, 1e+50 best solution, best possible -1099 (1221.31 seconds)
Cbc0010I After 49 nodes, 33 on tree, 1e+50 best solution, best possible -1099 (1230.16 seconds)
Cbc0010I After 50 nodes, 33 on tree, 1e+50 best solution, best possible -1099 (1232.75 seconds)
Cbc0010I After 51 nodes, 34 on tree, 1e+50 best solution, best possible -1099 (1240.93 seconds)
Cbc0010I After 52 nodes, 34 on tree, 1e+50 best solution, best possible -1099 (1243.57 seconds)
Cbc0010I After 53 nodes, 35 on tree, 1e+50 best solution, best possible -1099 (1245.83 seconds)
Cbc0010I After 54 nodes, 35 on tree, 1e+50 best solution, best possible -1099 (1255.92 seconds)
Cbc0010I After 55 nodes, 36 on tree, 1e+50 best solution, best possible -1099 (1258.05 seconds)
Cbc0010I After 56 nodes, 37 on tree, 1e+50 best solution, best possible -1099 (1264.66 seconds)
Cbc0010I After 57 nodes, 38 on tree, 1e+50 best solution, best possible -1099 (1265.74 seconds)
Cbc0004I Integer solution of -1099 found after 105868 iterations and 58 nodes (1266.64 seconds)
Cbc0001I Search completed - best objective -1099, took 105868 iterations and 58 nodes (1266.65 seconds)
Cbc0032I Strong branching done 1272 times (116928 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 31, 0 variables fixed on reduced cost
Cuts at root node changed objective from -1099 to -1099
Probing was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (5.79633 seconds)
Gomory was tried 20 times and created 10 cuts of which 0 were active after adding rounds of cuts (3.01144 seconds)
Knapsack was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.833047 seconds)
Clique was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.211483 seconds)
OddWheel was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (3.9726 seconds)
MixedIntegerRounding2 was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.329118 seconds)
FlowCover was tried 4 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.021362 seconds)
TwoMirCuts was tried 4 times and created 18 cuts of which 0 were active after adding rounds of cuts (4.83145 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (1.14485 seconds)

Result - Optimal solution found
Objective value:                -1099
Enumerated nodes:               58
Total iterations:               105868
Time (CPU seconds):             1275.36
Time (Wallclock seconds):       1275.87
Total time (CPU seconds):       1275.5   (Wallclock seconds):       1276.06
