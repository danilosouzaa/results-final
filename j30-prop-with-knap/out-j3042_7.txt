Welcome to the CBC MILP Solver
Version: Devel (unstable)
Build Date: Apr 26 2022
command line - -import /home/danilo/psp-janniele/J30/j3042/j3042_7.lp -timeM elapsed -seconds 10800 -solve -quit (default strategy 1)
seconds was changed from 1e+08 to 10800
Continuous objective value is 1.49009 - 0.188132 seconds
Cgl0002I 13 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 9 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 7 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0004I processed model has 288 rows, 703 columns (703 integer (702 of which binary)) and 7640 elements
Coin3009W Conflict graph built in 0.028 seconds, density: 1.125%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0045I Cutoff increment increased from 0.0001 to 0.9999
Cbc0045I 1 integer variables out of 703 objects (703 integer) have cost of 1 - high priority
Cbc0045I branch on satisfied Y create fake objective Y random cost Y
Cbc0038I Initial state - 78 integers unsatisfied sum - 20.7528
Cbc0038I Pass   1: suminf.   16.21143 (63) obj. 2.18432 iterations 99
Cbc0038I Pass   2: suminf.   10.47382 (51) obj. 4 iterations 33
Cbc0038I Pass   3: suminf.   10.47382 (51) obj. 4 iterations 2
Cbc0038I Pass   4: suminf.    9.54308 (40) obj. 4 iterations 77
Cbc0038I Pass   5: suminf.    8.82796 (42) obj. 4 iterations 35
Cbc0038I Pass   6: suminf.    8.07921 (44) obj. 4 iterations 26
Cbc0038I Pass   7: suminf.    6.80337 (38) obj. 4 iterations 30
Cbc0038I Pass   8: suminf.    8.25227 (38) obj. 4 iterations 74
Cbc0038I Pass   9: suminf.    7.30061 (42) obj. 4 iterations 41
Cbc0038I Pass  10: suminf.    6.86802 (41) obj. 4 iterations 19
Cbc0038I Pass  11: suminf.   11.63033 (41) obj. 4 iterations 84
Cbc0038I Pass  12: suminf.    8.84331 (41) obj. 4 iterations 45
Cbc0038I Pass  13: suminf.    8.47967 (36) obj. 4 iterations 99
Cbc0038I Pass  14: suminf.    8.10007 (39) obj. 4 iterations 30
Cbc0038I Pass  15: suminf.    9.76805 (35) obj. 4 iterations 78
Cbc0038I Pass  16: suminf.    8.66887 (39) obj. 4 iterations 41
Cbc0038I Pass  17: suminf.    8.20301 (41) obj. 4 iterations 34
Cbc0038I Pass  18: suminf.    8.07458 (42) obj. 4 iterations 41
Cbc0038I Pass  19: suminf.    8.07778 (33) obj. 4 iterations 82
Cbc0038I Pass  20: suminf.    7.72705 (38) obj. 4 iterations 26
Cbc0038I Pass  21: suminf.    9.37099 (41) obj. 4 iterations 58
Cbc0038I Pass  22: suminf.    7.91667 (32) obj. 4 iterations 29
Cbc0038I Pass  23: suminf.    8.48997 (43) obj. 4 iterations 57
Cbc0038I Pass  24: suminf.    7.68858 (36) obj. 4 iterations 34
Cbc0038I Pass  25: suminf.    7.12503 (44) obj. 4 iterations 31
Cbc0038I Pass  26: suminf.    6.92836 (44) obj. 4 iterations 9
Cbc0038I Pass  27: suminf.    6.51224 (40) obj. 4 iterations 15
Cbc0038I Pass  28: suminf.    8.66781 (38) obj. 4 iterations 65
Cbc0038I Pass  29: suminf.    7.71164 (39) obj. 4 iterations 29
Cbc0038I Pass  30: suminf.    7.54247 (32) obj. 4 iterations 16
Cbc0038I Pass  31: suminf.    7.66919 (40) obj. 4 iterations 71
Cbc0038I Pass  32: suminf.    6.88147 (40) obj. 4 iterations 54
Cbc0038I Pass  33: suminf.    7.48859 (46) obj. 4 iterations 62
Cbc0038I Pass  34: suminf.    7.28961 (45) obj. 4 iterations 35
Cbc0038I Pass  35: suminf.   11.68850 (43) obj. 4 iterations 102
Cbc0038I Pass  36: suminf.    8.18753 (42) obj. 4 iterations 59
Cbc0038I Pass  37: suminf.    8.09623 (39) obj. 4 iterations 11
Cbc0038I Pass  38: suminf.    6.90192 (33) obj. 4 iterations 61
Cbc0038I Pass  39: suminf.    6.78111 (30) obj. 4 iterations 9
Cbc0038I Pass  40: suminf.    7.42893 (30) obj. 4 iterations 49
Cbc0038I Pass  41: suminf.    7.22685 (30) obj. 4 iterations 26
Cbc0038I Pass  42: suminf.    6.95403 (29) obj. 4 iterations 32
Cbc0038I Pass  43: suminf.   13.66553 (58) obj. 4 iterations 143
Cbc0038I Pass  44: suminf.    8.23479 (47) obj. 4 iterations 106
Cbc0038I Pass  45: suminf.    7.19831 (37) obj. 4 iterations 15
Cbc0038I Pass  46: suminf.    7.11800 (36) obj. 4 iterations 7
Cbc0038I Pass  47: suminf.    5.97289 (34) obj. 4 iterations 30
Cbc0038I Pass  48: suminf.    5.63903 (35) obj. 4 iterations 17
Cbc0038I Pass  49: suminf.    6.27261 (28) obj. 4 iterations 59
Cbc0038I Pass  50: suminf.    5.79958 (31) obj. 4 iterations 38
Cbc0038I Pass  51: suminf.    5.78641 (27) obj. 4 iterations 42
Cbc0038I Pass  52: suminf.    4.71888 (31) obj. 4 iterations 40
Cbc0038I Pass  53: suminf.    8.68707 (29) obj. 4 iterations 53
Cbc0038I Pass  54: suminf.    5.67745 (25) obj. 4 iterations 49
Cbc0038I Pass  55: suminf.    4.84784 (28) obj. 4 iterations 12
Cbc0038I Pass  56: suminf.    4.84784 (28) obj. 4 iterations 2
Cbc0038I Pass  57: suminf.    8.14653 (29) obj. 4 iterations 64
Cbc0038I Pass  58: suminf.    5.87283 (26) obj. 4 iterations 38
Cbc0038I Pass  59: suminf.    4.58574 (28) obj. 4 iterations 35
Cbc0038I Pass  60: suminf.    4.58574 (28) obj. 4 iterations 3
Cbc0038I Pass  61: suminf.    6.11085 (24) obj. 4 iterations 39
Cbc0038I Pass  62: suminf.    5.08574 (28) obj. 4 iterations 37
Cbc0038I Pass  63: suminf.    8.61230 (31) obj. 4 iterations 61
Cbc0038I Pass  64: suminf.    7.06079 (31) obj. 4 iterations 38
Cbc0038I Pass  65: suminf.    6.15279 (32) obj. 4 iterations 11
Cbc0038I Pass  66: suminf.    7.89096 (29) obj. 4 iterations 27
Cbc0038I Pass  67: suminf.    6.64722 (29) obj. 4 iterations 23
Cbc0038I Pass  68: suminf.    7.60943 (34) obj. 4 iterations 37
Cbc0038I Pass  69: suminf.    7.16428 (31) obj. 4 iterations 26
Cbc0038I Pass  70: suminf.    6.14722 (29) obj. 4 iterations 17
Cbc0038I Pass  71: suminf.    7.60814 (28) obj. 4 iterations 40
Cbc0038I Pass  72: suminf.    6.31389 (29) obj. 4 iterations 20
Cbc0038I Pass  73: suminf.    5.31389 (27) obj. 4 iterations 3
Cbc0038I Pass  74: suminf.    5.31389 (27) obj. 4 iterations 0
Cbc0038I Pass  75: suminf.    7.15145 (31) obj. 4 iterations 50
Cbc0038I Pass  76: suminf.    6.57221 (30) obj. 4 iterations 31
Cbc0038I Pass  77: suminf.    5.43991 (33) obj. 4 iterations 36
Cbc0038I Pass  78: suminf.    7.62041 (32) obj. 4 iterations 26
Cbc0038I Pass  79: suminf.    5.74086 (26) obj. 4 iterations 22
Cbc0038I Pass  80: suminf.    5.15792 (24) obj. 4 iterations 13
Cbc0038I Pass  81: suminf.    7.86596 (26) obj. 4 iterations 31
Cbc0038I Pass  82: suminf.    6.07379 (25) obj. 4 iterations 43
Cbc0038I Pass  83: suminf.    7.12787 (27) obj. 4 iterations 41
Cbc0038I Pass  84: suminf.    5.98778 (25) obj. 4 iterations 72
Cbc0038I Pass  85: suminf.    5.32111 (24) obj. 4 iterations 3
Cbc0038I Pass  86: suminf.    7.32913 (25) obj. 4 iterations 27
Cbc0038I Pass  87: suminf.    6.05218 (25) obj. 4 iterations 22
Cbc0038I Pass  88: suminf.    6.76814 (27) obj. 4 iterations 25
Cbc0038I Pass  89: suminf.    5.15792 (24) obj. 4 iterations 16
Cbc0038I Pass  90: suminf.    8.00008 (30) obj. 4 iterations 30
Cbc0038I Pass  91: suminf.    7.06428 (28) obj. 4 iterations 47
Cbc0038I Pass  92: suminf.    6.05218 (25) obj. 4 iterations 17
Cbc0038I Pass  93: suminf.    5.92944 (30) obj. 4 iterations 37
Cbc0038I Pass  94: suminf.    5.52624 (34) obj. 4 iterations 16
Cbc0038I Pass  95: suminf.    7.43333 (30) obj. 4 iterations 32
Cbc0038I Pass  96: suminf.    6.42963 (31) obj. 4 iterations 19
Cbc0038I Pass  97: suminf.    6.35556 (30) obj. 4 iterations 4
Cbc0038I Pass  98: suminf.    7.60697 (34) obj. 4 iterations 41
Cbc0038I Pass  99: suminf.    7.06246 (30) obj. 4 iterations 16
Cbc0038I Pass 100: suminf.   16.41772 (64) obj. 4 iterations 88
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 461 integers at bound fixed and 0 continuous
Cbc0038I Full problem 288 rows 703 columns, reduced to 205 rows 219 columns
Cbc0038I Mini branch and bound did not improve solution (2.65 seconds)
Cbc0038I After 2.65 seconds - Feasibility pump exiting - took 1.15 seconds
Cbc0031I 100 added rows had average density of 30.47
Cbc0013I At root node, 100 cuts changed objective from 1.4900889 to 3 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 385 row cuts average 12.1 elements, 3 column cuts (68 active)  in 0.460 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 209 row cuts average 536.6 elements, 0 column cuts (0 active)  in 0.717 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 43 row cuts average 15.2 elements, 0 column cuts (0 active)  in 0.106 seconds - new frequency is 1
Cbc0014I Cut generator 3 (liftKnapsack) - 303 row cuts average 13.3 elements, 0 column cuts (0 active)  in 11.933 seconds - new frequency is 1
Cbc0014I Cut generator 4 (Clique) - 2 row cuts average 7.0 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is -100
Cbc0014I Cut generator 5 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.080 seconds - new frequency is -100
Cbc0014I Cut generator 6 (MixedIntegerRounding2) - 145 row cuts average 45.6 elements, 0 column cuts (0 active)  in 0.055 seconds - new frequency is 1
Cbc0014I Cut generator 7 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 8 (TwoMirCuts) - 224 row cuts average 171.4 elements, 0 column cuts (0 active)  in 0.328 seconds - new frequency is 1
Cbc0014I Cut generator 9 (ZeroHalf) - 136 row cuts average 47.4 elements, 0 column cuts (0 active)  in 0.127 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 3 (18.71 seconds)
Cbc0010I After 1 nodes, 2 on tree, 1e+50 best solution, best possible 3 (19.92 seconds)
Cbc0010I After 2 nodes, 3 on tree, 1e+50 best solution, best possible 3 (21.41 seconds)
Cbc0010I After 3 nodes, 4 on tree, 1e+50 best solution, best possible 3 (23.73 seconds)
Cbc0010I After 4 nodes, 5 on tree, 1e+50 best solution, best possible 3 (26.78 seconds)
Cbc0010I After 5 nodes, 6 on tree, 1e+50 best solution, best possible 3 (30.24 seconds)
Cbc0010I After 6 nodes, 7 on tree, 1e+50 best solution, best possible 3 (33.05 seconds)
Cbc0010I After 7 nodes, 8 on tree, 1e+50 best solution, best possible 3 (34.40 seconds)
Cbc0010I After 9 nodes, 8 on tree, 1e+50 best solution, best possible 3 (35.98 seconds)
Cbc0010I After 11 nodes, 8 on tree, 1e+50 best solution, best possible 3 (38.11 seconds)
Cbc0010I After 12 nodes, 9 on tree, 1e+50 best solution, best possible 3 (39.64 seconds)
Cbc0010I After 13 nodes, 10 on tree, 1e+50 best solution, best possible 3 (40.83 seconds)
Cbc0010I After 15 nodes, 10 on tree, 1e+50 best solution, best possible 3 (42.22 seconds)
Cbc0010I After 18 nodes, 8 on tree, 1e+50 best solution, best possible 3 (44.07 seconds)
Cbc0010I After 24 nodes, 3 on tree, 1e+50 best solution, best possible 3 (46.58 seconds)
Cbc0010I After 25 nodes, 3 on tree, 1e+50 best solution, best possible 3 (47.92 seconds)
Cbc0010I After 27 nodes, 2 on tree, 1e+50 best solution, best possible 3 (48.85 seconds)
Cbc0010I After 28 nodes, 2 on tree, 1e+50 best solution, best possible 3 (50.15 seconds)
Cbc0010I After 30 nodes, 1 on tree, 1e+50 best solution, best possible 4 (51.47 seconds)
Cbc0010I After 31 nodes, 2 on tree, 1e+50 best solution, best possible 4 (53.75 seconds)
Cbc0010I After 33 nodes, 3 on tree, 1e+50 best solution, best possible 4 (54.60 seconds)
Cbc0010I After 35 nodes, 4 on tree, 1e+50 best solution, best possible 4 (56.01 seconds)
Cbc0010I After 38 nodes, 7 on tree, 1e+50 best solution, best possible 4 (57.06 seconds)
Cbc0010I After 41 nodes, 6 on tree, 1e+50 best solution, best possible 4 (57.87 seconds)
Cbc0010I After 46 nodes, 5 on tree, 1e+50 best solution, best possible 4 (58.96 seconds)
Cbc0010I After 51 nodes, 2 on tree, 1e+50 best solution, best possible 4 (62.02 seconds)
Cbc0010I After 52 nodes, 3 on tree, 1e+50 best solution, best possible 4 (64.12 seconds)
Cbc0010I After 53 nodes, 4 on tree, 1e+50 best solution, best possible 4 (65.91 seconds)
Cbc0010I After 54 nodes, 5 on tree, 1e+50 best solution, best possible 4 (66.92 seconds)
Cbc0010I After 55 nodes, 6 on tree, 1e+50 best solution, best possible 4 (67.99 seconds)
Cbc0010I After 56 nodes, 6 on tree, 1e+50 best solution, best possible 4 (69.69 seconds)
Cbc0010I After 57 nodes, 7 on tree, 1e+50 best solution, best possible 4 (70.90 seconds)
Cbc0010I After 59 nodes, 7 on tree, 1e+50 best solution, best possible 4 (72.02 seconds)
Cbc0010I After 60 nodes, 8 on tree, 1e+50 best solution, best possible 4 (72.80 seconds)
Cbc0010I After 64 nodes, 8 on tree, 1e+50 best solution, best possible 4 (73.61 seconds)
Cbc0010I After 66 nodes, 9 on tree, 1e+50 best solution, best possible 4 (75.19 seconds)
Cbc0010I After 68 nodes, 10 on tree, 1e+50 best solution, best possible 4 (76.72 seconds)
Cbc0010I After 70 nodes, 11 on tree, 1e+50 best solution, best possible 4 (78.05 seconds)
Cbc0010I After 72 nodes, 12 on tree, 1e+50 best solution, best possible 4 (78.88 seconds)
Cbc0016I Integer solution of 4 found by strong branching after 19955 iterations and 76 nodes (79.51 seconds)
Cbc0001I Search completed - best objective 4, took 19989 iterations and 76 nodes (79.52 seconds)
Cbc0032I Strong branching done 1266 times (33645 iterations), fathomed 2 nodes and fixed 11 variables
Cbc0035I Maximum depth 16, 0 variables fixed on reduced cost
Cuts at root node changed objective from 1.49009 to 3
Probing was tried 83 times and created 1147 cuts of which 65 were active after adding rounds of cuts (0.851575 seconds)
Gomory was tried 83 times and created 217 cuts of which 0 were active after adding rounds of cuts (0.964718 seconds)
Knapsack was tried 83 times and created 144 cuts of which 0 were active after adding rounds of cuts (0.697847 seconds)
liftKnapsack was tried 83 times and created 1456 cuts of which 0 were active after adding rounds of cuts (59.3564 seconds)
Clique was tried 10 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.020661 seconds)
OddWheel was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.08043 seconds)
MixedIntegerRounding2 was tried 83 times and created 637 cuts of which 0 were active after adding rounds of cuts (0.353661 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002655 seconds)
TwoMirCuts was tried 83 times and created 522 cuts of which 0 were active after adding rounds of cuts (0.495218 seconds)
ZeroHalf was tried 83 times and created 576 cuts of which 0 were active after adding rounds of cuts (0.700752 seconds)

Result - Optimal solution found
Objective value:                4
Enumerated nodes:               76
Total iterations:               19989
Time (CPU seconds):             79.2822
Time (Wallclock seconds):       79.5729
Total time (CPU seconds):       79.2932   (Wallclock seconds):       79.5837
