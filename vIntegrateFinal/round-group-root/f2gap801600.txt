Welcome to the CBC MILP Solver
Version: Devel (unstable)
Build Date: Mar 30 2022
command line - -import /home/danilo/cbc-test-set/f2gap801600.mps.gz -timeM elapsed -seconds 10800 -knapsack off -solve -solu sol-group-root/f2gap801600.txt -quit (default strategy 1)
At line 2 NAME          f2gap801600
At line 3 ROWS
At line 85 COLUMNS
At line 4881 RHS
At line 4962 BOUNDS
At line 6563 ENDATA
Problem f2gap801600 has 80 rows, 1600 columns and 3200 elements
Coin0008I f2gap801600 read with 0 errors
seconds was changed from 1e+08 to 10800
Continuous objective value is 86570.1 - 0.052732 seconds
Cgl0004I processed model has 80 rows, 1600 columns (1600 integer (1600 of which binary)) and 3200 elements
Coin3009W Conflict graph built in 0.002 seconds, density: 0.031%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0045I Cutoff increment increased from 0.0001 to 0.9999
Cbc0038I Initial state - 66 integers unsatisfied sum - 5.26684
Cbc0038I Pass   1: suminf.    1.01364 (20) obj. 86648 iterations 115
Cbc0038I Solution found of 86679
Cbc0038I Before mini branch and bound, 1525 integers at bound fixed and 0 continuous
Cbc0038I Full problem 80 rows 1600 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound did not improve solution (0.16 seconds)
Cbc0038I Round again with cutoff of 86667.2
Cbc0038I Pass   2: suminf.    1.01364 (20) obj. 86648 iterations 0
Cbc0038I Pass   3: suminf.    0.12384 (9) obj. 86667.2 iterations 101
Cbc0038I Pass   4: suminf.    0.15123 (9) obj. 86664.6 iterations 20
Cbc0038I Pass   5: suminf.    5.64177 (67) obj. 86593.6 iterations 133
Cbc0038I Pass   6: suminf.    1.61892 (48) obj. 86615.5 iterations 75
Cbc0038I Pass   7: suminf.    1.19060 (46) obj. 86614.8 iterations 34
Cbc0038I Pass   8: suminf.    1.59269 (43) obj. 86624.4 iterations 46
Cbc0038I Pass   9: suminf.    3.37247 (68) obj. 86593.3 iterations 84
Cbc0038I Pass  10: suminf.    5.20318 (68) obj. 86596.8 iterations 104
Cbc0038I Pass  11: suminf.    0.86688 (37) obj. 86634.7 iterations 107
Cbc0038I Pass  12: suminf.    2.51547 (46) obj. 86628.6 iterations 58
Cbc0038I Pass  13: suminf.    0.81077 (40) obj. 86642.5 iterations 62
Cbc0038I Pass  14: suminf.    3.37943 (64) obj. 86614.3 iterations 68
Cbc0038I Pass  15: suminf.    1.85403 (63) obj. 86613.8 iterations 35
Cbc0038I Pass  16: suminf.    4.02274 (65) obj. 86630.3 iterations 99
Cbc0038I Pass  17: suminf.    1.52886 (61) obj. 86633.6 iterations 75
Cbc0038I Pass  18: suminf.    1.40835 (63) obj. 86632.6 iterations 21
Cbc0038I Pass  19: suminf.    1.61129 (60) obj. 86632 iterations 41
Cbc0038I Pass  20: suminf.    3.12496 (68) obj. 86641 iterations 67
Cbc0038I Pass  21: suminf.    2.20401 (65) obj. 86638.5 iterations 45
Cbc0038I Pass  22: suminf.    4.72390 (66) obj. 86634.2 iterations 69
Cbc0038I Pass  23: suminf.    3.63090 (67) obj. 86633.3 iterations 34
Cbc0038I Pass  24: suminf.    3.56571 (69) obj. 86633.8 iterations 8
Cbc0038I Pass  25: suminf.    2.73424 (67) obj. 86625.2 iterations 80
Cbc0038I Pass  26: suminf.    1.69777 (64) obj. 86622.9 iterations 45
Cbc0038I Pass  27: suminf.    2.06940 (52) obj. 86637.3 iterations 80
Cbc0038I Pass  28: suminf.    1.32062 (61) obj. 86632.4 iterations 76
Cbc0038I Pass  29: suminf.    2.30476 (64) obj. 86645.8 iterations 47
Cbc0038I Pass  30: suminf.    1.36294 (61) obj. 86651.6 iterations 69
Cbc0038I Pass  31: suminf.    1.56328 (60) obj. 86648.3 iterations 53
Cbc0038I Before mini branch and bound, 1247 integers at bound fixed and 0 continuous
Cbc0038I Full problem 80 rows 1600 columns, reduced to 67 rows 289 columns
Cbc0038I Mini branch and bound did not improve solution (2.56 seconds)
Cbc0038I Round again with cutoff of 86647.8
Cbc0038I Pass  31: suminf.    1.02010 (21) obj. 86647.8 iterations 1
Cbc0038I Pass  32: suminf.    0.32921 (19) obj. 86647.8 iterations 76
Cbc0038I Pass  33: suminf.    0.32982 (19) obj. 86647.8 iterations 19
Cbc0038I Pass  34: suminf.    5.04751 (66) obj. 86628.3 iterations 140
Cbc0038I Pass  35: suminf.    4.03084 (69) obj. 86631.2 iterations 35
Cbc0038I Pass  36: suminf.    2.44806 (59) obj. 86636.8 iterations 97
Cbc0038I Pass  37: suminf.    0.99597 (42) obj. 86641.8 iterations 86
Cbc0038I Pass  38: suminf.    3.40648 (56) obj. 86623.7 iterations 69
Cbc0038I Pass  39: suminf.    3.83684 (72) obj. 86615.5 iterations 109
Cbc0038I Pass  40: suminf.    1.48649 (53) obj. 86627.5 iterations 112
Cbc0038I Pass  41: suminf.    4.49099 (66) obj. 86615.9 iterations 70
Cbc0038I Pass  42: suminf.    1.72372 (65) obj. 86620.1 iterations 72
Cbc0038I Pass  43: suminf.    2.52578 (65) obj. 86618.5 iterations 50
Cbc0038I Pass  44: suminf.    6.14690 (67) obj. 86647.8 iterations 81
Cbc0038I Pass  45: suminf.    1.32909 (60) obj. 86647.8 iterations 138
Cbc0038I Pass  46: suminf.    1.99761 (56) obj. 86647.8 iterations 80
Cbc0038I Pass  47: suminf.    4.02805 (69) obj. 86633.9 iterations 111
Cbc0038I Pass  48: suminf.    1.50185 (54) obj. 86639.8 iterations 116
Cbc0038I Pass  49: suminf.    3.82350 (55) obj. 86638.2 iterations 71
Cbc0038I Pass  50: suminf.    1.19258 (46) obj. 86647.8 iterations 136
Cbc0038I Pass  51: suminf.    1.05800 (47) obj. 86647.8 iterations 47
Cbc0038I Pass  52: suminf.    1.80161 (48) obj. 86639.3 iterations 97
Cbc0038I Pass  53: suminf.    3.64586 (67) obj. 86640.5 iterations 136
Cbc0038I Pass  54: suminf.    1.64387 (60) obj. 86647.8 iterations 99
Cbc0038I Pass  55: suminf.    2.04576 (59) obj. 86647.8 iterations 62
Cbc0038I Pass  56: suminf.    4.17736 (71) obj. 86632.9 iterations 95
Cbc0038I Pass  57: suminf.    1.35830 (54) obj. 86647.8 iterations 125
Cbc0038I Pass  58: suminf.    1.72556 (49) obj. 86647 iterations 89
Cbc0038I Pass  59: suminf.    5.38223 (71) obj. 86640.6 iterations 107
Cbc0038I Pass  60: suminf.    2.96226 (70) obj. 86637.8 iterations 47
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 1111 integers at bound fixed and 0 continuous
Cbc0038I Full problem 80 rows 1600 columns, reduced to 77 rows 468 columns
Cbc0038I Mini branch and bound did not improve solution (5.34 seconds)
Cbc0038I After 5.34 seconds - Feasibility pump exiting with objective of 86679 - took 2.77 seconds
Cbc0012I Integer solution of 86679 found by feasibility pump after 0 iterations and 0 nodes (5.34 seconds)
Cbc0031I 117 added rows had average density of 42.111111
Cbc0013I At root node, 344 cuts changed objective from 86570.121 to 86678.823 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 56 row cuts average 99.2 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is 1
Cbc0014I Cut generator 2 (liftKnapsack) - 116 row cuts average 35.2 elements, 0 column cuts (0 active)  in 0.062 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 57 row cuts average 40.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 87 row cuts average 97.1 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 28 row cuts average 42.9 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0001I Search completed - best objective 86679, took 198 iterations and 0 nodes (9.17 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 86570.1 to 86678.8
Probing was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.026012 seconds)
Gomory was tried 1 times and created 56 cuts of which 0 were active after adding rounds of cuts (0.036374 seconds)
liftKnapsack was tried 1 times and created 116 cuts of which 0 were active after adding rounds of cuts (0.062148 seconds)
Clique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (4.7e-05 seconds)
OddWheel was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (5.3e-05 seconds)
MixedIntegerRounding2 was tried 1 times and created 57 cuts of which 0 were active after adding rounds of cuts (0.00717 seconds)
FlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000159 seconds)
TwoMirCuts was tried 1 times and created 87 cuts of which 0 were active after adding rounds of cuts (0.029739 seconds)
ZeroHalf was tried 1 times and created 28 cuts of which 0 were active after adding rounds of cuts (0.007395 seconds)

Result - Optimal solution found
Objective value:                86679
Enumerated nodes:               0
Total iterations:               198
Time (CPU seconds):             8.5963
Time (Wallclock seconds):       9.18411
Total time (CPU seconds):       8.62265   (Wallclock seconds):       9.21985
