Welcome to the CBC MILP Solver
Version: Devel (unstable)
Build Date: Mar 30 2022
command line - -import /home/danilo/cbc-test-set/23588.mps.gz -timeM elapsed -seconds 10800 -knapsack off -solve -solu sol-group-root/23588.txt -quit (default strategy 1)
At line 1 NAME   23588
At line 2 ROWS
At line 141 COLUMNS
At line 3846 RHS
At line 3984 BOUNDS
At line 4353 ENDATA
Problem 23588 has 137 rows, 368 columns and 3701 elements
Coin0008I 23588 read with 0 errors
seconds was changed from 1e+08 to 10800
Continuous objective value is 7649.87 - 0.020144 seconds
Cgl0004I processed model has 137 rows, 231 columns (231 integer (231 of which binary)) and 3564 elements
Coin3009W Conflict graph built in 0.002 seconds, density: 0.216%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0045I Cutoff increment increased from 0.0001 to 0.9999
Cbc0038I Initial state - 73 integers unsatisfied sum - 18.4418
Cbc0038I Pass   1: suminf.    4.61839 (20) obj. 8363 iterations 126
Cbc0038I Pass   2: suminf.    2.30941 (7) obj. 8363 iterations 60
Cbc0038I Pass   3: suminf.    3.50575 (8) obj. 8363 iterations 44
Cbc0038I Pass   4: suminf.    2.19427 (19) obj. 8363 iterations 71
Cbc0038I Pass   5: suminf.    2.30973 (6) obj. 8363 iterations 43
Cbc0038I Pass   6: suminf.    2.30973 (6) obj. 8363 iterations 20
Cbc0038I Pass   7: suminf.    8.46745 (28) obj. 8363 iterations 66
Cbc0038I Pass   8: suminf.    3.76177 (15) obj. 8363 iterations 48
Cbc0038I Pass   9: suminf.    0.22593 (14) obj. 8363 iterations 15
Cbc0038I Pass  10: suminf.    0.15450 (43) obj. 8363 iterations 50
Cbc0038I Pass  11: suminf.    1.94972 (4) obj. 8363 iterations 79
Cbc0038I Pass  12: suminf.    1.02924 (3) obj. 8363 iterations 13
Cbc0038I Pass  13: suminf.    1.00000 (5) obj. 8363 iterations 59
Cbc0038I Pass  14: suminf.    1.93234 (5) obj. 8363 iterations 40
Cbc0038I Pass  15: suminf.    2.12202 (17) obj. 8363 iterations 66
Cbc0038I Pass  16: suminf.    0.20000 (2) obj. 8363 iterations 77
Cbc0038I Solution found of 8342
Cbc0038I Rounding solution of 8287 is better than previous of 8342
Cbc0038I Before mini branch and bound, 145 integers at bound fixed and 0 continuous
Cbc0038I Full problem 137 rows 231 columns, reduced to 136 rows 86 columns - 8 fixed gives 108, 73 - ok now
Cbc0038I Full problem 137 rows 231 columns, reduced to 108 rows 69 columns
Cbc0038I Mini branch and bound improved solution from 8287 to 8235 (0.38 seconds)
Cbc0038I Round again with cutoff of 8175.59
Cbc0038I Reduced cost fixing fixed 15 variables on major pass 2
Cbc0038I Pass  17: suminf.    5.14035 (36) obj. 8175.59 iterations 28
Cbc0038I Pass  18: suminf.    2.52579 (12) obj. 8175.59 iterations 40
Cbc0038I Pass  19: suminf.    2.47884 (18) obj. 8175.59 iterations 11
Cbc0038I Pass  20: suminf.    2.59742 (10) obj. 8175.59 iterations 48
Cbc0038I Pass  21: suminf.    3.71567 (21) obj. 8175.59 iterations 85
Cbc0038I Pass  22: suminf.    1.82668 (31) obj. 8175.59 iterations 44
Cbc0038I Pass  23: suminf.    1.15400 (37) obj. 8175.59 iterations 25
Cbc0038I Pass  24: suminf.    6.75870 (23) obj. 8175.59 iterations 81
Cbc0038I Pass  25: suminf.    5.97502 (25) obj. 8175.59 iterations 17
Cbc0038I Pass  26: suminf.    5.31403 (20) obj. 8175.59 iterations 37
Cbc0038I Pass  27: suminf.    5.10259 (15) obj. 8175.59 iterations 14
Cbc0038I Pass  28: suminf.    4.74063 (14) obj. 8175.59 iterations 42
Cbc0038I Pass  29: suminf.    4.22678 (14) obj. 8175.59 iterations 16
Cbc0038I Pass  30: suminf.    3.99522 (17) obj. 8175.59 iterations 14
Cbc0038I Pass  31: suminf.    5.25469 (12) obj. 8175.59 iterations 54
Cbc0038I Pass  32: suminf.    3.15138 (10) obj. 8175.59 iterations 23
Cbc0038I Pass  33: suminf.    0.29399 (10) obj. 8175.59 iterations 13
Cbc0038I Pass  34: suminf.    0.22247 (12) obj. 8175.59 iterations 29
Cbc0038I Pass  35: suminf.    3.13407 (11) obj. 8175.59 iterations 32
Cbc0038I Pass  36: suminf.    3.13407 (11) obj. 8175.59 iterations 11
Cbc0038I Pass  37: suminf.    1.00000 (4) obj. 8175.59 iterations 55
Cbc0038I Pass  38: suminf.    1.00000 (4) obj. 8175.59 iterations 1
Cbc0038I Pass  39: suminf.    2.22576 (7) obj. 8175.59 iterations 31
Cbc0038I Pass  40: suminf.    2.22576 (7) obj. 8175.59 iterations 9
Cbc0038I Pass  41: suminf.    0.03753 (2) obj. 8175.59 iterations 38
Cbc0038I Solution found of 8169
Cbc0038I Before mini branch and bound, 147 integers at bound fixed and 0 continuous
Cbc0038I Full problem 137 rows 231 columns, reduced to 136 rows 84 columns - 17 fixed gives 101, 62 - ok now
Cbc0038I Full problem 137 rows 231 columns, reduced to 86 rows 45 columns
Cbc0038I Mini branch and bound did not improve solution (0.58 seconds)
Cbc0038I Round again with cutoff of 8064.37
Cbc0038I Reduced cost fixing fixed 36 variables on major pass 3
Cbc0038I Pass  42: suminf.    7.66431 (36) obj. 8064.37 iterations 5
Cbc0038I Pass  43: suminf.    4.59574 (39) obj. 8064.37 iterations 62
Cbc0038I Pass  44: suminf.    6.66647 (35) obj. 8064.37 iterations 28
Cbc0038I Pass  45: suminf.    5.63316 (33) obj. 8064.37 iterations 21
Cbc0038I Pass  46: suminf.    4.35743 (37) obj. 8064.37 iterations 18
Cbc0038I Pass  47: suminf.    4.21037 (39) obj. 8064.37 iterations 8
Cbc0038I Pass  48: suminf.    6.76099 (33) obj. 8064.37 iterations 66
Cbc0038I Pass  49: suminf.    6.33333 (35) obj. 8064.37 iterations 15
Cbc0038I Pass  50: suminf.    5.87948 (35) obj. 8064.37 iterations 19
Cbc0038I Pass  51: suminf.    5.35965 (31) obj. 8064.37 iterations 13
Cbc0038I Pass  52: suminf.    5.24569 (35) obj. 8064.37 iterations 17
Cbc0038I Pass  53: suminf.    8.59456 (31) obj. 8064.37 iterations 30
Cbc0038I Pass  54: suminf.    8.08299 (33) obj. 8064.37 iterations 10
Cbc0038I Pass  55: suminf.   10.50104 (32) obj. 8064.37 iterations 27
Cbc0038I Pass  56: suminf.    8.06556 (35) obj. 8064.37 iterations 27
Cbc0038I Pass  57: suminf.    9.27693 (31) obj. 8064.37 iterations 56
Cbc0038I Pass  58: suminf.    6.29483 (42) obj. 8064.37 iterations 32
Cbc0038I Pass  59: suminf.    6.28131 (42) obj. 8064.37 iterations 4
Cbc0038I Pass  60: suminf.    7.62061 (36) obj. 8064.37 iterations 52
Cbc0038I Pass  61: suminf.    6.59058 (36) obj. 8064.37 iterations 29
Cbc0038I Pass  62: suminf.    6.41079 (34) obj. 8064.37 iterations 9
Cbc0038I Pass  63: suminf.    7.34573 (20) obj. 8064.37 iterations 56
Cbc0038I Pass  64: suminf.    3.82995 (12) obj. 8064.37 iterations 27
Cbc0038I Pass  65: suminf.    3.82995 (12) obj. 8064.37 iterations 10
Cbc0038I Pass  66: suminf.    5.22693 (17) obj. 8064.37 iterations 23
Cbc0038I Pass  67: suminf.    4.35061 (19) obj. 8064.37 iterations 29
Cbc0038I Pass  68: suminf.    7.03196 (21) obj. 8064.37 iterations 41
Cbc0038I Pass  69: suminf.    4.93196 (14) obj. 8064.37 iterations 16
Cbc0038I Pass  70: suminf.    2.94604 (11) obj. 8064.37 iterations 20
Cbc0038I Pass  71: suminf.    2.13772 (12) obj. 8064.37 iterations 28
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 141 integers at bound fixed and 0 continuous
Cbc0038I Full problem 137 rows 231 columns, reduced to 137 rows 90 columns - 21 fixed gives 95, 62 - ok now
Cbc0038I Full problem 137 rows 231 columns, reduced to 86 rows 45 columns
Cbc0038I Mini branch and bound did not improve solution (0.81 seconds)
Cbc0038I After 0.81 seconds - Feasibility pump exiting with objective of 8169 - took 0.69 seconds
Cbc0012I Integer solution of 8169 found by feasibility pump after 0 iterations and 0 nodes (0.81 seconds)
Cbc0038I Full problem 137 rows 231 columns, reduced to 136 rows 74 columns - 15 fixed gives 82, 47 - ok now
Cbc0038I Full problem 137 rows 231 columns, reduced to 58 rows 29 columns
Cbc0031I 10 added rows had average density of 186.3
Cbc0013I At root node, 10 cuts changed objective from 7649.8661 to 7752.4586 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.034 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.051 seconds - new frequency is -100
Cbc0014I Cut generator 2 (liftKnapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.937 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.057 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 157 row cuts average 207.0 elements, 0 column cuts (0 active)  in 0.287 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 7 row cuts average 13.6 elements, 0 column cuts (0 active)  in 0.167 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 8169 best solution, best possible 7752.4586 (2.92 seconds)
Cbc0010I After 4 nodes, 5 on tree, 8169 best solution, best possible 7752.4586 (3.69 seconds)
Cbc0016I Integer solution of 8150 found by strong branching after 1334 iterations and 21 nodes (3.87 seconds)
Cbc0004I Integer solution of 8148 found after 1582 iterations and 33 nodes (3.94 seconds)
Cbc0016I Integer solution of 8142 found by strong branching after 1843 iterations and 46 nodes (4.02 seconds)
Cbc0038I Full problem 147 rows 231 columns, reduced to 137 rows 197 columns - too large
Cbc0010I After 82 nodes, 9 on tree, 8142 best solution, best possible 7752.4586 (4.39 seconds)
Cbc0016I Integer solution of 8122 found by strong branching after 3130 iterations and 94 nodes (4.45 seconds)
Cbc0016I Integer solution of 8113 found by strong branching after 3255 iterations and 99 nodes (4.48 seconds)
Cbc0010I After 194 nodes, 19 on tree, 8113 best solution, best possible 7752.4586 (5.09 seconds)
Cbc0010I After 474 nodes, 14 on tree, 8113 best solution, best possible 7752.4586 (5.79 seconds)
Cbc0016I Integer solution of 8090 found by strong branching after 14263 iterations and 537 nodes (6.04 seconds)
Cbc0010I After 590 nodes, 1 on tree, 8090 best solution, best possible 7818.8911 (6.69 seconds)
Cbc0010I After 795 nodes, 5 on tree, 8090 best solution, best possible 7844.1248 (7.39 seconds)
Cbc0001I Search completed - best objective 8090, took 25780 iterations and 1092 nodes (7.48 seconds)
Cbc0032I Strong branching done 2570 times (39341 iterations), fathomed 32 nodes and fixed 22 variables
Cbc0041I Maximum depth 28, 4461 variables fixed on reduced cost (complete fathoming 48 times, 272 nodes taking 4273 iterations)
Cuts at root node changed objective from 7649.87 to 7752.46
Probing was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.033999 seconds)
Gomory was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.050786 seconds)
liftKnapsack was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.936999 seconds)
Clique was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (9.9e-05 seconds)
OddWheel was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000109 seconds)
MixedIntegerRounding2 was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.056713 seconds)
FlowCover was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000567 seconds)
TwoMirCuts was tried 165 times and created 630 cuts of which 0 were active after adding rounds of cuts (0.881233 seconds)
ZeroHalf was tried 9 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.166757 seconds)

Result - Optimal solution found
Objective value:                8090
Enumerated nodes:               1092
Total iterations:               25780
Time (CPU seconds):             7.46043
Time (Wallclock seconds):       7.49292
Total time (CPU seconds):       7.46347   (Wallclock seconds):       7.50222
