Welcome to the CBC MILP Solver
Version: Devel (unstable)
Build Date: Apr 26 2022
command line - -import /home/danilo/cbc-test-set/neos-960392.mps.gz -timeM elapsed -seconds 10800 -solve -solu sol-final-knap/neos-960392.txt -quit (default strategy 1)
At line 1 NAME          neos-960392
At line 2 ROWS
At line 4748 COLUMNS
At line 195829 RHS
At line 197754 BOUNDS
At line 257131 ENDATA
Problem neos-960392 has 4744 rows, 59376 columns and 189503 elements
Coin0008I neos-960392 read with 0 errors
seconds was changed from 1e+08 to 10800
Continuous objective value is -238 - 13.2505 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 911 strengthened rows, 0 substitutions
Cgl0003I 198 fixed, 0 tightened bounds, 819 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 202 strengthened rows, 0 substitutions
Cgl0003I 15 fixed, 0 tightened bounds, 582 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 119 strengthened rows, 0 substitutions
Cgl0003I 171 fixed, 0 tightened bounds, 533 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 40 strengthened rows, 0 substitutions
Cgl0003I 38 fixed, 0 tightened bounds, 485 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 16 strengthened rows, 0 substitutions
Cgl0003I 16 fixed, 0 tightened bounds, 478 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 16 fixed, 0 tightened bounds, 471 strengthened rows, 0 substitutions
Cgl0003I 16 fixed, 0 tightened bounds, 471 strengthened rows, 0 substitutions
Cgl0003I 16 fixed, 0 tightened bounds, 470 strengthened rows, 0 substitutions
Cgl0004I processed model has 3958 rows, 58811 columns (58811 integer (58811 of which binary)) and 189722 elements
Coin3009W Conflict graph built in 5.648 seconds, density: 0.175%
Cgl0015I Clique Strengthening extended 59 cliques, 93 were dominated
After applying Clique Strengthening continuous objective value is -238
Cbc0045I Cutoff increment increased from 0.0001 to 0.9999
Cbc0038I Initial state - 1020 integers unsatisfied sum - 269.915
Cbc0038I Pass   1: (66.04 seconds) suminf.    9.74298 (64) obj. -220.618 iterations 5124
Cbc0038I Pass   2: (69.23 seconds) suminf.    0.37736 (4) obj. -219.811 iterations 1782
Cbc0038I Pass   3: (69.93 seconds) suminf.    1.16936 (6) obj. -219.604 iterations 486
Cbc0038I Pass   4: (72.79 seconds) suminf.    4.37464 (17) obj. -220.604 iterations 2186
Cbc0038I Pass   5: (79.18 seconds) suminf.    0.37736 (4) obj. -220.811 iterations 3298
Cbc0038I Pass   6: (79.86 seconds) suminf.    0.79200 (4) obj. -220.604 iterations 401
Cbc0038I Pass   7: (83.63 seconds) suminf.    8.61679 (59) obj. -221.604 iterations 2627
Cbc0038I Pass   8: (87.68 seconds) suminf.    0.75472 (8) obj. -221.623 iterations 3015
Cbc0038I Pass   9: (88.29 seconds) suminf.    2.86747 (13) obj. -221.604 iterations 568
Cbc0038I Pass  10: (89.81 seconds) suminf.    0.75472 (8) obj. -221.623 iterations 952
Cbc0038I Pass  11: (92.45 seconds) suminf.    1.73313 (28) obj. -220.604 iterations 2261
Cbc0038I Pass  12: (97.48 seconds) suminf.    0.75472 (8) obj. -220.623 iterations 2884
Cbc0038I Pass  13: (98.31 seconds) suminf.    2.86747 (13) obj. -220.604 iterations 543
Cbc0038I Pass  14: (101.78 seconds) suminf.    1.77268 (13) obj. -222.604 iterations 2335
Cbc0038I Pass  15: (108.43 seconds) suminf.    0.75472 (8) obj. -222.623 iterations 3195
Cbc0038I Pass  16: (109.06 seconds) suminf.    1.16936 (10) obj. -222.604 iterations 457
Cbc0038I Pass  17: (114.80 seconds) suminf.   13.71970 (39) obj. -224.104 iterations 2577
Cbc0038I Pass  18: (120.49 seconds) suminf.    0.79200 (10) obj. -223.604 iterations 3103
Cbc0038I Pass  19: (121.76 seconds) suminf.    0.75472 (8) obj. -223.623 iterations 466
Cbc0038I Pass  20: (122.42 seconds) suminf.    1.16936 (10) obj. -223.604 iterations 497
Cbc0038I Pass  21: (128.27 seconds) suminf.    1.69585 (16) obj. -223.604 iterations 2669
Cbc0038I Pass  22: (133.53 seconds) suminf.    0.75472 (8) obj. -223.623 iterations 2733
Cbc0038I Pass  23: (134.28 seconds) suminf.    1.16936 (10) obj. -223.604 iterations 442
Cbc0038I Pass  24: (139.91 seconds) suminf.    3.00289 (52) obj. -223.604 iterations 2962
Cbc0038I Pass  25: (144.43 seconds) suminf.    0.75472 (8) obj. -223.623 iterations 2955
Cbc0038I Pass  26: (144.97 seconds) suminf.    1.16936 (10) obj. -223.604 iterations 435
Cbc0038I Pass  27: (150.35 seconds) suminf.    0.82928 (12) obj. -223.604 iterations 2803
Cbc0038I Pass  28: (154.67 seconds) suminf.    0.75472 (8) obj. -223.623 iterations 2624
Cbc0038I Pass  29: (155.37 seconds) suminf.    1.16936 (10) obj. -223.604 iterations 466
Cbc0038I Pass  30: (160.83 seconds) suminf.    2.93525 (55) obj. -223.604 iterations 2856
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 57355 integers at bound fixed and 0 continuous
Cbc0038I Full problem 3924 rows 58811 columns, reduced to 1537 rows 1108 columns
Cbc0038I Mini branch and bound did not improve solution (176.58 seconds)
Cbc0038I Full problem 3925 rows 58811 columns, reduced to 3905 rows 58785 columns - too large
Cbc0038I After 212.78 seconds - Feasibility pump exiting - took 152.25 seconds
Cbc0031I 12 added rows had average density of 198.58333
Cbc0013I At root node, 12 cuts changed objective from -238 to -238 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 11 row cuts average 2.6 elements, 1 column cuts (1 active)  in 44.312 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 8 row cuts average 709.4 elements, 0 column cuts (0 active)  in 4.438 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 11 row cuts average 10.1 elements, 0 column cuts (0 active)  in 1.227 seconds - new frequency is 1
Cbc0014I Cut generator 3 (liftKnapsack) - 25 row cuts average 8.8 elements, 0 column cuts (0 active)  in 36.123 seconds - new frequency is 1
Cbc0014I Cut generator 4 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 1.428 seconds - new frequency is -100
Cbc0014I Cut generator 5 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 15.903 seconds - new frequency is -100
Cbc0014I Cut generator 6 (MixedIntegerRounding2) - 8 row cuts average 175.1 elements, 0 column cuts (0 active)  in 0.834 seconds - new frequency is 1
Cbc0014I Cut generator 7 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.058 seconds - new frequency is -100
Cbc0014I Cut generator 8 (TwoMirCuts) - 10 row cuts average 73.3 elements, 0 column cuts (0 active)  in 16.811 seconds - new frequency is -100
Cbc0014I Cut generator 9 (ZeroHalf) - 34 row cuts average 13.0 elements, 0 column cuts (0 active)  in 14.378 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible -238 (389.00 seconds)
Cbc0010I After 1 nodes, 2 on tree, 1e+50 best solution, best possible -238 (404.59 seconds)
Cbc0010I After 2 nodes, 3 on tree, 1e+50 best solution, best possible -238 (418.37 seconds)
Cbc0010I After 3 nodes, 4 on tree, 1e+50 best solution, best possible -238 (430.34 seconds)
Cbc0010I After 4 nodes, 5 on tree, 1e+50 best solution, best possible -238 (443.37 seconds)
Cbc0010I After 5 nodes, 6 on tree, 1e+50 best solution, best possible -238 (449.52 seconds)
Cbc0010I After 6 nodes, 7 on tree, 1e+50 best solution, best possible -238 (453.33 seconds)
Cbc0010I After 7 nodes, 8 on tree, 1e+50 best solution, best possible -238 (455.34 seconds)
Cbc0010I After 8 nodes, 9 on tree, 1e+50 best solution, best possible -238 (457.43 seconds)
Cbc0010I After 9 nodes, 10 on tree, 1e+50 best solution, best possible -238 (459.36 seconds)
Cbc0010I After 10 nodes, 11 on tree, 1e+50 best solution, best possible -238 (461.21 seconds)
Cbc0010I After 11 nodes, 11 on tree, 1e+50 best solution, best possible -238 (463.10 seconds)
Cbc0010I After 12 nodes, 11 on tree, 1e+50 best solution, best possible -238 (464.67 seconds)
Cbc0010I After 13 nodes, 12 on tree, 1e+50 best solution, best possible -238 (466.04 seconds)
Cbc0010I After 14 nodes, 13 on tree, 1e+50 best solution, best possible -238 (469.94 seconds)
Cbc0010I After 15 nodes, 14 on tree, 1e+50 best solution, best possible -238 (471.41 seconds)
Cbc0010I After 16 nodes, 15 on tree, 1e+50 best solution, best possible -238 (473.20 seconds)
Cbc0010I After 17 nodes, 16 on tree, 1e+50 best solution, best possible -238 (474.34 seconds)
Cbc0010I After 18 nodes, 17 on tree, 1e+50 best solution, best possible -238 (475.88 seconds)
Cbc0010I After 19 nodes, 18 on tree, 1e+50 best solution, best possible -238 (479.46 seconds)
Cbc0010I After 20 nodes, 19 on tree, 1e+50 best solution, best possible -238 (480.64 seconds)
Cbc0010I After 21 nodes, 20 on tree, 1e+50 best solution, best possible -238 (482.04 seconds)
Cbc0010I After 22 nodes, 21 on tree, 1e+50 best solution, best possible -238 (483.18 seconds)
Cbc0010I After 23 nodes, 22 on tree, 1e+50 best solution, best possible -238 (484.43 seconds)
Cbc0010I After 24 nodes, 23 on tree, 1e+50 best solution, best possible -238 (486.64 seconds)
Cbc0010I After 25 nodes, 24 on tree, 1e+50 best solution, best possible -238 (487.60 seconds)
Cbc0010I After 26 nodes, 24 on tree, 1e+50 best solution, best possible -238 (489.08 seconds)
Cbc0010I After 27 nodes, 25 on tree, 1e+50 best solution, best possible -238 (489.87 seconds)
Cbc0010I After 28 nodes, 25 on tree, 1e+50 best solution, best possible -238 (490.83 seconds)
Cbc0010I After 29 nodes, 26 on tree, 1e+50 best solution, best possible -238 (492.47 seconds)
Cbc0010I After 30 nodes, 27 on tree, 1e+50 best solution, best possible -238 (493.74 seconds)
Cbc0010I After 31 nodes, 28 on tree, 1e+50 best solution, best possible -238 (497.32 seconds)
Cbc0010I After 32 nodes, 29 on tree, 1e+50 best solution, best possible -238 (498.51 seconds)
Cbc0010I After 34 nodes, 31 on tree, 1e+50 best solution, best possible -238 (500.40 seconds)
Cbc0010I After 35 nodes, 32 on tree, 1e+50 best solution, best possible -238 (502.53 seconds)
Cbc0010I After 36 nodes, 32 on tree, 1e+50 best solution, best possible -238 (504.59 seconds)
Cbc0010I After 37 nodes, 32 on tree, 1e+50 best solution, best possible -238 (505.48 seconds)
Cbc0010I After 38 nodes, 33 on tree, 1e+50 best solution, best possible -238 (507.30 seconds)
Cbc0010I After 39 nodes, 34 on tree, 1e+50 best solution, best possible -238 (510.29 seconds)
Cbc0010I After 40 nodes, 34 on tree, 1e+50 best solution, best possible -238 (514.05 seconds)
Cbc0010I After 41 nodes, 35 on tree, 1e+50 best solution, best possible -238 (515.03 seconds)
Cbc0010I After 42 nodes, 35 on tree, 1e+50 best solution, best possible -238 (519.68 seconds)
Cbc0010I After 43 nodes, 35 on tree, 1e+50 best solution, best possible -238 (520.95 seconds)
Cbc0010I After 44 nodes, 36 on tree, 1e+50 best solution, best possible -238 (523.62 seconds)
Cbc0010I After 45 nodes, 36 on tree, 1e+50 best solution, best possible -238 (527.70 seconds)
Cbc0010I After 46 nodes, 36 on tree, 1e+50 best solution, best possible -238 (530.19 seconds)
Cbc0010I After 47 nodes, 36 on tree, 1e+50 best solution, best possible -238 (533.07 seconds)
Cbc0010I After 48 nodes, 37 on tree, 1e+50 best solution, best possible -238 (535.04 seconds)
Cbc0010I After 49 nodes, 37 on tree, 1e+50 best solution, best possible -238 (537.30 seconds)
Cbc0010I After 50 nodes, 38 on tree, 1e+50 best solution, best possible -238 (539.51 seconds)
Cbc0010I After 51 nodes, 39 on tree, 1e+50 best solution, best possible -238 (543.39 seconds)
Cbc0010I After 52 nodes, 39 on tree, 1e+50 best solution, best possible -238 (545.55 seconds)
Cbc0010I After 53 nodes, 40 on tree, 1e+50 best solution, best possible -238 (546.82 seconds)
Cbc0010I After 54 nodes, 40 on tree, 1e+50 best solution, best possible -238 (549.83 seconds)
Cbc0010I After 55 nodes, 40 on tree, 1e+50 best solution, best possible -238 (550.96 seconds)
Cbc0010I After 56 nodes, 41 on tree, 1e+50 best solution, best possible -238 (552.53 seconds)
Cbc0010I After 57 nodes, 41 on tree, 1e+50 best solution, best possible -238 (556.83 seconds)
Cbc0010I After 58 nodes, 42 on tree, 1e+50 best solution, best possible -238 (558.94 seconds)
Cbc0010I After 59 nodes, 42 on tree, 1e+50 best solution, best possible -238 (561.18 seconds)
Cbc0010I After 60 nodes, 43 on tree, 1e+50 best solution, best possible -238 (565.94 seconds)
Cbc0010I After 61 nodes, 44 on tree, 1e+50 best solution, best possible -238 (570.24 seconds)
Cbc0010I After 62 nodes, 43 on tree, 1e+50 best solution, best possible -238 (579.39 seconds)
Cbc0010I After 63 nodes, 43 on tree, 1e+50 best solution, best possible -238 (584.06 seconds)
Cbc0010I After 64 nodes, 44 on tree, 1e+50 best solution, best possible -238 (586.96 seconds)
Cbc0010I After 65 nodes, 44 on tree, 1e+50 best solution, best possible -238 (589.30 seconds)
Cbc0010I After 66 nodes, 45 on tree, 1e+50 best solution, best possible -238 (590.40 seconds)
Cbc0010I After 67 nodes, 46 on tree, 1e+50 best solution, best possible -238 (591.87 seconds)
Cbc0010I After 68 nodes, 45 on tree, 1e+50 best solution, best possible -238 (595.36 seconds)
Cbc0010I After 69 nodes, 45 on tree, 1e+50 best solution, best possible -238 (597.05 seconds)
Cbc0010I After 70 nodes, 46 on tree, 1e+50 best solution, best possible -238 (600.17 seconds)
Cbc0010I After 71 nodes, 46 on tree, 1e+50 best solution, best possible -238 (602.02 seconds)
Cbc0010I After 72 nodes, 47 on tree, 1e+50 best solution, best possible -238 (603.97 seconds)
Cbc0010I After 73 nodes, 47 on tree, 1e+50 best solution, best possible -238 (606.20 seconds)
Cbc0010I After 74 nodes, 48 on tree, 1e+50 best solution, best possible -238 (611.38 seconds)
Cbc0010I After 75 nodes, 47 on tree, 1e+50 best solution, best possible -238 (617.39 seconds)
Cbc0010I After 76 nodes, 47 on tree, 1e+50 best solution, best possible -238 (624.39 seconds)
Cbc0004I Integer solution of -238 found after 52732 iterations and 77 nodes (625.99 seconds)
Cbc0001I Search completed - best objective -238, took 52732 iterations and 77 nodes (626.04 seconds)
Cbc0032I Strong branching done 576 times (7592 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 41, 0 variables fixed on reduced cost
Cuts at root node changed objective from -238 to -238
Probing was tried 33 times and created 27 cuts of which 0 were active after adding rounds of cuts (45.0925 seconds)
Gomory was tried 10 times and created 8 cuts of which 0 were active after adding rounds of cuts (4.43819 seconds)
Knapsack was tried 33 times and created 15 cuts of which 0 were active after adding rounds of cuts (3.61002 seconds)
liftKnapsack was tried 33 times and created 47 cuts of which 0 were active after adding rounds of cuts (87.1225 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (1.42774 seconds)
OddWheel was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (15.9031 seconds)
MixedIntegerRounding2 was tried 33 times and created 18 cuts of which 0 were active after adding rounds of cuts (2.2085 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.058143 seconds)
TwoMirCuts was tried 10 times and created 10 cuts of which 0 were active after adding rounds of cuts (16.8111 seconds)
ZeroHalf was tried 10 times and created 34 cuts of which 0 were active after adding rounds of cuts (14.3784 seconds)

Result - Optimal solution found
Objective value:                -238
Enumerated nodes:               77
Total iterations:               52732
Time (CPU seconds):             626.271
Time (Wallclock seconds):       627.831
Total time (CPU seconds):       626.565   (Wallclock seconds):       628.066
