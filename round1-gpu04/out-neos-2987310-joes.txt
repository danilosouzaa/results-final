Welcome to the CBC MILP Solver
Version: Devel (unstable)
Build Date: Feb  6 2022
command line - -import /home/danilo/cbc-test-set/neos-2987310-joes.mps.gz -timeM elapsed -seconds 10800 -solve -quit (default strategy 1)
At line 1 NAME          neos-2987310-joes
At line 2 ROWS
At line 29019 COLUMNS
At line 634099 RHS
At line 634667 BOUNDS
At line 662505 ENDATA
Problem neos-2987310-joes has 29015 rows, 27837 columns and 580291 elements
Coin0008I neos-2987310-joes read with 0 errors
seconds was changed from 1e+08 to 10800
Continuous objective value is -6.10797e+08 - 5.04542 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 111 strengthened rows, 0 substitutions
Cgl0004I processed model has 28697 rows, 24793 columns (3024 integer (3024 of which binary)) and 465249 elements
Coin3009W Conflict graph built in 0.027 seconds, density: 0.000%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 65 integers unsatisfied sum - 20.625
Cbc0038I Pass   1: (13.23 seconds) suminf.    6.00000 (40) obj. -6.08866e+08 iterations 2884
Cbc0038I Pass   2: (13.44 seconds) suminf.    3.00000 (37) obj. -6.0811e+08 iterations 27
Cbc0038I Pass   3: (13.63 seconds) suminf.    3.00000 (37) obj. -6.0811e+08 iterations 2
Cbc0038I Pass   4: (13.87 seconds) suminf.    1.00000 (7) obj. -6.03647e+08 iterations 59
Cbc0038I Pass   5: (14.08 seconds) suminf.    0.00000 (0) obj. -6.04827e+08 iterations 32
Cbc0038I Solution found of -6.04827e+08
Cbc0038I Relaxing continuous gives -6.07703e+08
Cbc0038I Before mini branch and bound, 2959 integers at bound fixed and 21304 continuous
Cbc0038I Full problem 28697 rows 24793 columns, reduced to 200 rows 165 columns
Cbc0038I Mini branch and bound did not improve solution (15.32 seconds)
Cbc0038I Round again with cutoff of -6.08012e+08
Cbc0038I Reduced cost fixing fixed 26 variables on major pass 2
Cbc0038I Pass   6: (16.03 seconds) suminf.    6.00000 (40) obj. -6.08866e+08 iterations 0
Cbc0038I Pass   7: (16.23 seconds) suminf.    3.00000 (37) obj. -6.0811e+08 iterations 25
Cbc0038I Pass   8: (16.42 seconds) suminf.    3.00000 (37) obj. -6.0811e+08 iterations 2
Cbc0038I Pass   9: (17.22 seconds) suminf.    1.36630 (15) obj. -6.08012e+08 iterations 393
Cbc0038I Pass  10: (17.46 seconds) suminf.    1.36630 (15) obj. -6.08012e+08 iterations 11
Cbc0038I Pass  11: (23.13 seconds) suminf.    4.20025 (15) obj. -6.08012e+08 iterations 3453
Cbc0038I Pass  12: (23.56 seconds) suminf.    1.00000 (12) obj. -6.08012e+08 iterations 67
Cbc0038I Pass  13: (23.86 seconds) suminf.    1.00000 (12) obj. -6.08012e+08 iterations 2
Cbc0038I Pass  14: (24.47 seconds) suminf.    9.73042 (21) obj. -6.08012e+08 iterations 158
Cbc0038I Pass  15: (24.90 seconds) suminf.    7.41766 (18) obj. -6.08012e+08 iterations 74
Cbc0038I Pass  16: (25.43 seconds) suminf.    1.36630 (15) obj. -6.08012e+08 iterations 109
Cbc0038I Pass  17: (25.73 seconds) suminf.    1.36630 (15) obj. -6.08012e+08 iterations 5
Cbc0038I Pass  18: (27.86 seconds) suminf.    4.20025 (15) obj. -6.08012e+08 iterations 780
Cbc0038I Pass  19: (28.30 seconds) suminf.    1.00000 (12) obj. -6.08012e+08 iterations 71
Cbc0038I Pass  20: (28.60 seconds) suminf.    1.00000 (12) obj. -6.08012e+08 iterations 2
Cbc0038I Pass  21: (29.25 seconds) suminf.    9.73042 (21) obj. -6.08012e+08 iterations 143
Cbc0038I Pass  22: (29.70 seconds) suminf.    5.00000 (16) obj. -6.08012e+08 iterations 69
Cbc0038I Pass  23: (30.00 seconds) suminf.    5.00000 (16) obj. -6.08012e+08 iterations 4
Cbc0038I Pass  24: (30.41 seconds) suminf.    5.00000 (16) obj. -6.08012e+08 iterations 305
Cbc0038I Pass  25: (30.79 seconds) suminf.    5.00000 (16) obj. -6.08012e+08 iterations 254
Cbc0038I Pass  26: (31.28 seconds) suminf.    9.80035 (21) obj. -6.08012e+08 iterations 86
Cbc0038I Pass  27: (31.61 seconds) suminf.   10.00000 (21) obj. -6.08012e+08 iterations 30
Cbc0038I Pass  28: (31.99 seconds) suminf.    5.00000 (16) obj. -6.08012e+08 iterations 50
Cbc0038I Pass  29: (32.73 seconds) suminf.    3.00000 (15) obj. -6.08012e+08 iterations 411
Cbc0038I Pass  30: (33.14 seconds) suminf.    2.68600 (15) obj. -6.08012e+08 iterations 231
Cbc0038I Pass  31: (33.87 seconds) suminf.    1.84291 (13) obj. -6.08012e+08 iterations 181
Cbc0038I Pass  32: (34.43 seconds) suminf.   10.68472 (23) obj. -6.08012e+08 iterations 125
Cbc0038I Pass  33: (34.91 seconds) suminf.    5.00000 (17) obj. -6.08012e+08 iterations 67
Cbc0038I Pass  34: (35.34 seconds) suminf.    5.00000 (16) obj. -6.08012e+08 iterations 54
Cbc0038I Pass  35: (35.95 seconds) suminf.    8.96111 (20) obj. -6.08012e+08 iterations 134
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 2956 integers at bound fixed and 21286 continuous
Cbc0038I Full problem 28697 rows 24793 columns, reduced to 199 rows 165 columns
Cbc0038I Mini branch and bound did not improve solution (36.49 seconds)
Cbc0038I After 36.49 seconds - Feasibility pump exiting with objective of -6.07703e+08 - took 24.28 seconds
Cbc0012I Integer solution of -6.0770299e+08 found by feasibility pump after 0 iterations and 0 nodes (36.57 seconds)
Cbc0038I Full problem 28697 rows 24793 columns, reduced to 7081 rows 7091 columns
Cbc0031I 8 added rows had average density of 219.5
Cbc0013I At root node, 130 cuts changed objective from -6.1079747e+08 to -6.0770299e+08 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 69 column cuts (69 active)  in 0.527 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 65 row cuts average 293.1 elements, 0 column cuts (0 active)  in 0.406 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.083 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 1.128 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.235 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.089 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 65 row cuts average 256.8 elements, 0 column cuts (0 active)  in 0.460 seconds - new frequency is -100
Cbc0001I Search completed - best objective -607702988.2909052, took 0 iterations and 0 nodes (46.73 seconds)
Cbc0035I Maximum depth 0, 24 variables fixed on reduced cost
Cuts at root node changed objective from -6.10797e+08 to -6.07703e+08
Probing was tried 1 times and created 69 cuts of which 0 were active after adding rounds of cuts (0.52735 seconds)
Gomory was tried 1 times and created 65 cuts of which 0 were active after adding rounds of cuts (0.405671 seconds)
Knapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.083368 seconds)
Clique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002069 seconds)
OddWheel was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (1.12794 seconds)
MixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.234604 seconds)
FlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.088626 seconds)
TwoMirCuts was tried 1 times and created 65 cuts of which 0 were active after adding rounds of cuts (0.4596 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.052833 seconds)

Result - Optimal solution found
Objective value:                -607702988.291
Enumerated nodes:               0
Total iterations:               0
Time (CPU seconds):             52.5331
Time (Wallclock seconds):       52.787
Total time (CPU seconds):       53.1142   (Wallclock seconds):       53.4246
