Welcome to the CBC MILP Solver
Version: Devel (unstable)
Build Date: Feb  6 2022
command line - -import /home/danilo/cbc-test-set/misc06.mps.gz -timeM elapsed -seconds 10800 -solve -quit (default strategy 1)
At line 15 NAME          MISC06
At line 16 ROWS
At line 838 COLUMNS
At line 4327 RHS
At line 4393 BOUNDS
At line 4532 ENDATA
Problem MISC06 has 820 rows, 1808 columns and 5859 elements
Coin0008I MISC06 read with 0 errors
seconds was changed from 1e+08 to 10800
Continuous objective value is 12841.7 - 0.05833 seconds
Cgl0004I processed model has 522 rows, 1265 columns (112 integer (112 of which binary)) and 2984 elements
Coin3009W Conflict graph built in 0.001 seconds, density: 0.003%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 14 integers unsatisfied sum - 2.76063
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 12910.5 iterations 87
Cbc0038I Solution found of 12910.5
Cbc0038I Relaxing continuous gives 12870.3
Cbc0038I Before mini branch and bound, 98 integers at bound fixed and 917 continuous
Cbc0038I Full problem 522 rows 1265 columns, reduced to 182 rows 210 columns
Cbc0038I Mini branch and bound did not improve solution (0.19 seconds)
Cbc0038I Round again with cutoff of 12867.5
Cbc0038I Reduced cost fixing fixed 13 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.02067 (1) obj. 12867.5 iterations 111
Cbc0038I Pass   3: suminf.    0.00000 (0) obj. 12867.5 iterations 45
Cbc0038I Solution found of 12867.5
Cbc0038I Relaxing continuous gives 12866.3
Cbc0038I Before mini branch and bound, 98 integers at bound fixed and 906 continuous
Cbc0038I Full problem 522 rows 1265 columns, reduced to 188 rows 223 columns - 7 fixed gives 186, 216 - still too large
Cbc0038I Full problem 522 rows 1265 columns, reduced to 182 rows 215 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.29 seconds)
Cbc0038I Round again with cutoff of 12861.4
Cbc0038I Reduced cost fixing fixed 19 variables on major pass 3
Cbc0038I Pass   4: suminf.    0.06759 (3) obj. 12861.4 iterations 3
Cbc0038I Pass   5: suminf.    0.09468 (2) obj. 12861.4 iterations 63
Cbc0038I Pass   6: suminf.    0.00000 (0) obj. 12861.4 iterations 39
Cbc0038I Solution found of 12861.4
Cbc0038I Relaxing continuous gives 12854.1
Cbc0038I Before mini branch and bound, 97 integers at bound fixed and 891 continuous
Cbc0038I Full problem 522 rows 1265 columns, reduced to 190 rows 240 columns - 7 fixed gives 190, 233 - still too large
Cbc0038I Full problem 522 rows 1265 columns, reduced to 186 rows 232 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.38 seconds)
Cbc0038I Round again with cutoff of 12850.4
Cbc0038I Reduced cost fixing fixed 39 variables on major pass 4
Cbc0038I Pass   7: suminf.    0.23606 (5) obj. 12850.4 iterations 21
Cbc0038I Pass   8: suminf.    1.28125 (5) obj. 12850.4 iterations 76
Cbc0038I Pass   9: suminf.    0.65468 (4) obj. 12850.4 iterations 9
Cbc0038I Pass  10: suminf.    0.71839 (4) obj. 12850.4 iterations 44
Cbc0038I Pass  11: suminf.    1.03081 (4) obj. 12850.4 iterations 41
Cbc0038I Pass  12: suminf.    0.46654 (3) obj. 12850.4 iterations 4
Cbc0038I Pass  13: suminf.    2.01390 (8) obj. 12850.4 iterations 18
Cbc0038I Pass  14: suminf.    1.34636 (6) obj. 12850.4 iterations 8
Cbc0038I Pass  15: suminf.    1.19070 (4) obj. 12850.4 iterations 36
Cbc0038I Pass  16: suminf.    0.56412 (3) obj. 12850.4 iterations 8
Cbc0038I Pass  17: suminf.    0.66183 (4) obj. 12850.4 iterations 41
Cbc0038I Pass  18: suminf.    0.09917 (2) obj. 12850.4 iterations 49
Cbc0038I Pass  19: suminf.    1.23755 (4) obj. 12850.4 iterations 28
Cbc0038I Pass  20: suminf.    0.61097 (3) obj. 12850.4 iterations 8
Cbc0038I Pass  21: suminf.    0.85508 (4) obj. 12850.4 iterations 31
Cbc0038I Pass  22: suminf.    1.17524 (4) obj. 12850.4 iterations 43
Cbc0038I Pass  23: suminf.    1.12842 (5) obj. 12850.4 iterations 17
Cbc0038I Pass  24: suminf.    0.35055 (3) obj. 12850.4 iterations 36
Cbc0038I Pass  25: suminf.    0.75262 (4) obj. 12850.4 iterations 31
Cbc0038I Pass  26: suminf.    0.34460 (3) obj. 12850.4 iterations 28
Cbc0038I Pass  27: suminf.    0.79947 (4) obj. 12850.4 iterations 45
Cbc0038I Pass  28: suminf.    1.19682 (8) obj. 12850.4 iterations 29
Cbc0038I Pass  29: suminf.    0.75593 (5) obj. 12850.4 iterations 13
Cbc0038I Pass  30: suminf.    0.98057 (6) obj. 12850.4 iterations 25
Cbc0038I Pass  31: suminf.    0.74664 (6) obj. 12850.4 iterations 3
Cbc0038I Pass  32: suminf.    1.25709 (6) obj. 12850.4 iterations 21
Cbc0038I Pass  33: suminf.    1.02316 (6) obj. 12850.4 iterations 3
Cbc0038I Pass  34: suminf.    1.14720 (6) obj. 12850.4 iterations 18
Cbc0038I Pass  35: suminf.    1.02109 (5) obj. 12850.4 iterations 12
Cbc0038I Pass  36: suminf.    1.01966 (6) obj. 12850.4 iterations 29
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 85 integers at bound fixed and 878 continuous
Cbc0038I Full problem 522 rows 1265 columns, reduced to 209 rows 261 columns - 8 fixed gives 209, 253 - still too large
Cbc0038I Full problem 522 rows 1265 columns, reduced to 205 rows 252 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.66 seconds)
Cbc0038I After 0.66 seconds - Feasibility pump exiting with objective of 12854.1 - took 0.52 seconds
Cbc0012I Integer solution of 12854.095 found by feasibility pump after 0 iterations and 0 nodes (0.70 seconds)
Cbc0038I Full problem 522 rows 1265 columns, reduced to 298 rows 775 columns - 7 fixed gives 298, 768 - still too large
Cbc0038I Full problem 522 rows 1265 columns, reduced to 276 rows 768 columns - too large
Cbc0012I Integer solution of 12853.879 found by DiveCoefficient after 235 iterations and 0 nodes (1.22 seconds)
Cbc0031I 22 added rows had average density of 128.09091
Cbc0013I At root node, 22 cuts changed objective from 12841.689 to 12849.342 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 4 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.066 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 102 row cuts average 185.8 elements, 0 column cuts (0 active)  in 0.039 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 2 row cuts average 64.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 88 row cuts average 159.5 elements, 0 column cuts (0 active)  in 0.052 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 12853.879 best solution, best possible 12849.343 (1.33 seconds)
Cbc0016I Integer solution of 12853.856 found by strong branching after 326 iterations and 4 nodes (1.53 seconds)
Cbc0016I Integer solution of 12850.861 found by strong branching after 500 iterations and 11 nodes (1.77 seconds)
Cbc0001I Search completed - best objective 12850.86073738254, took 507 iterations and 12 nodes (1.77 seconds)
Cbc0032I Strong branching done 94 times (1012 iterations), fathomed 5 nodes and fixed 7 variables
Cbc0035I Maximum depth 3, 117 variables fixed on reduced cost
Cuts at root node changed objective from 12841.7 to 12849.3
Probing was tried 10 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.065961 seconds)
Gomory was tried 25 times and created 107 cuts of which 0 were active after adding rounds of cuts (0.052042 seconds)
Knapsack was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.021946 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.00032 seconds)
OddWheel was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000468 seconds)
MixedIntegerRounding2 was tried 10 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.009644 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.022548 seconds)
TwoMirCuts was tried 10 times and created 88 cuts of which 0 were active after adding rounds of cuts (0.052384 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (7e-06 seconds)

Result - Optimal solution found
Objective value:                12850.8607374
Enumerated nodes:               12
Total iterations:               507
Time (CPU seconds):             2.05209
Time (Wallclock seconds):       2.06956
Total time (CPU seconds):       2.06215   (Wallclock seconds):       2.10425
